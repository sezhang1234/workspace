import React, { useState, useEffect } from 'react'
import { useNavigate, useLocation } from 'react-router-dom'
import { 
  ArrowLeft, 
  Save, 
  Play, 
  TestTube,
  Copy,
  Download,
  Upload,
  Trash2,
  Brain,
  Settings,
  Eye,
  Sparkles,
  Zap,
  BookOpen,
  MessageSquare,
  Plug
} from 'lucide-react'
import { 
  TextField, 
  Button, 
  Select, 
  MenuItem, 
  FormControl, 
  InputLabel, 
  Switch, 
  FormControlLabel,
  Chip,
  Tabs,
  Tab,
  Box,
  Typography,
  Card,
  Alert,
  Snackbar,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Divider,
} from '@mui/material'

interface TabPanelProps {
  children?: React.ReactNode
  index: number
  value: number
}

interface AgentEntryData {
  editMode: 'manual' | 'ai'
  name: string
  description: string
  icon: string
}

interface AgentConfig {
  name: string
  description: string
  icon: string
  editMode: 'manual' | 'ai'
  
  // System Prompt Configuration
  systemPrompt: string
  autoGeneratedPrompt: string
  promptTuning: {
    role: string
    capabilities: string[]
    behavior: string
    examples: string
  }
  
  // Orchestration Configuration
  model: string
  modelParams: {
    temperature: number
    maxTokens: number
    topP: number
    frequencyPenalty: number
    presencePenalty: number
  }
  plugins: string[]
  workflows: string[]
  triggers: string[]
  knowledge: string[]
  memory: {
    enabled: boolean
    type: 'conversation' | 'semantic' | 'hybrid'
    maxTokens: number
  }
  openingRemarks: string
  
  // Preview and Debug
  testHistory: Array<{ role: 'user' | 'assistant', content: string, timestamp: Date }>
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`agent-tabpanel-${index}`}
      aria-labelledby={`agent-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  )
}

const AgentEditorEnhancedPage: React.FC = () => {
  const navigate = useNavigate()
  const location = useLocation()
  
  const [activeTab, setActiveTab] = useState(0)
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' })
  
  // Get entry data from navigation state
  const entryData = location.state?.agentEntryData as AgentEntryData | undefined

  // Agent configuration state
  const [agentConfig, setAgentConfig] = useState<AgentConfig>({
    name: entryData?.name || '智能客服助手',
    description: entryData?.description || '专业的客户服务智能体，能够处理常见问题和投诉',
    icon: entryData?.icon || '🤖',
    editMode: entryData?.editMode || 'manual',
    
    // System Prompt Configuration
    systemPrompt: entryData?.editMode === 'ai' ? 
      `你是一个专业的${entryData?.name || '智能助手'}，${entryData?.description || ''}。请始终保持友好、专业的态度，提供准确、有用的帮助。` :
      '你是一个专业的客户服务代表，请用友好、专业的态度回答客户问题。',
    autoGeneratedPrompt: '',
    promptTuning: {
      role: '智能助手',
      capabilities: ['问题解答', '信息查询', '任务协助'],
      behavior: '友好、专业、准确',
      examples: '用户：你好\n助手：您好！我是您的智能助手，有什么可以帮助您的吗？'
    },
    
    // Orchestration Configuration
    model: 'gpt-4',
    modelParams: {
      temperature: 0.7,
      maxTokens: 2000,
      topP: 0.9,
      frequencyPenalty: 0.0,
      presencePenalty: 0.0
    },
    plugins: ['web_search', 'calculator', 'file_reader'],
    workflows: ['customer_service', 'troubleshooting'],
    triggers: ['greeting', 'question', 'complaint'],
    knowledge: ['product_manual', 'faq_database', 'company_policies'],
    memory: {
      enabled: true,
      type: 'conversation',
      maxTokens: 1000
    },
    openingRemarks: '您好！我是您的智能助手，很高兴为您服务。请问有什么可以帮助您的吗？',
    
    // Preview and Debug
    testHistory: []
  })

  // Test chat state
  const [testMessage, setTestMessage] = useState('')
  const [isTesting, setIsTesting] = useState(false)

  useEffect(() => {
    if (entryData?.editMode === 'ai') {
      // Auto-generate system prompt for AI mode
      const generatedPrompt = `你是一个专业的${entryData.name}，${entryData.description}。

角色定义：
- 主要职责：${entryData.description}
- 行为准则：始终保持友好、专业、准确
- 响应风格：清晰、有用、及时

能力范围：
- 问题解答：能够理解并回答用户的各种问题
- 任务协助：帮助用户完成相关任务
- 信息查询：提供准确的信息和建议

请根据以上配置，为用户提供最好的服务体验。`

      setAgentConfig(prev => ({
        ...prev,
        autoGeneratedPrompt: generatedPrompt,
        systemPrompt: generatedPrompt
      }))
    }
  }, [entryData])

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue)
  }

  const handleSave = () => {
    // Simulate saving
    setSnackbar({ open: true, message: '智能体配置保存成功！', severity: 'success' })
  }

  const handleTest = async () => {
    if (!testMessage.trim()) return
    
    setIsTesting(true)
    const userMessage = { 
      role: 'user' as const, 
      content: testMessage,
      timestamp: new Date()
    }
    
    setAgentConfig(prev => ({
      ...prev,
      testHistory: [...prev.testHistory, userMessage]
    }))
    
    // Simulate AI response
    setTimeout(() => {
      const aiResponse = { 
        role: 'assistant' as const, 
        content: `这是对"${testMessage}"的模拟回复。在实际环境中，这里会调用配置的LLM API并根据系统提示词生成响应。`,
        timestamp: new Date()
      }
      
      setAgentConfig(prev => ({
        ...prev,
        testHistory: [...prev.testHistory, aiResponse]
      }))
      setIsTesting(false)
    }, 1000)
    
    setTestMessage('')
  }

  const handleCopyPrompt = () => {
    navigator.clipboard.writeText(agentConfig.systemPrompt)
    setSnackbar({ open: true, message: '系统提示词已复制到剪贴板', severity: 'success' })
  }

  const handleExport = () => {
    const dataStr = JSON.stringify(agentConfig, null, 2)
    const dataBlob = new Blob([dataStr], { type: 'application/json' })
    const url = URL.createObjectURL(dataBlob)
    const link = document.createElement('a')
    link.href = url
    link.download = `${agentConfig.name || 'agent'}.json`
    link.click()
    URL.revokeObjectURL(url)
  }

  const handleImport = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onload = (e) => {
        try {
          const importedConfig = JSON.parse(e.target?.result as string)
          setAgentConfig(importedConfig)
          setSnackbar({ open: true, message: '智能体配置导入成功', severity: 'success' })
        } catch (error) {
          setSnackbar({ open: true, message: '导入失败：文件格式错误', severity: 'error' })
        }
      }
      reader.readAsText(file)
    }
  }

  return (
    <div className="space-y-6">
      {/* Page header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button
            variant="outlined"
            startIcon={<ArrowLeft />}
            onClick={() => navigate('/dashboard/agents')}
          >
            返回
          </Button>
          <div className="flex items-center space-x-3">
            <span className="text-2xl">{agentConfig.icon}</span>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">
                {agentConfig.name}
              </h1>
              <p className="text-gray-600">
                {agentConfig.description}
              </p>
            </div>
          </div>
        </div>
        
        <div className="flex items-center space-x-3">
          <Button
            variant="outlined"
            startIcon={<TestTube />}
            onClick={() => setActiveTab(2)}
          >
            测试调试
          </Button>
          <Button
            variant="contained"
            startIcon={<Save />}
            onClick={handleSave}
          >
            保存配置
          </Button>
        </div>
      </div>

      {/* Main content */}
      <Card>
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs value={activeTab} onChange={handleTabChange} aria-label="智能体配置标签页">
            <Tab 
              label={
                <div className="flex items-center space-x-2">
                  <Brain className="w-4 h-4" />
                  <span>系统提示词配置</span>
                </div>
              } 
            />
            <Tab 
              label={
                <div className="flex items-center space-x-2">
                  <Settings className="w-4 h-4" />
                  <span>编排配置</span>
                </div>
              } 
            />
            <Tab 
              label={
                <div className="flex items-center space-x-2">
                  <Eye className="w-4 h-4" />
                  <span>预览调试</span>
                </div>
              } 
            />
          </Tabs>
        </Box>

        {/* System Prompt Configuration Tab */}
        <TabPanel value={activeTab} index={0}>
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <Typography variant="h6">系统提示词开发</Typography>
              <Button
                size="small"
                startIcon={<Copy />}
                onClick={handleCopyPrompt}
              >
                复制提示词
              </Button>
            </div>
            
            <TextField
              fullWidth
              multiline
              rows={8}
              label="系统提示词"
              value={agentConfig.systemPrompt}
              onChange={(e) => setAgentConfig(prev => ({ ...prev, systemPrompt: e.target.value }))}
              placeholder="定义智能体的角色、能力和行为准则..."
            />

            {agentConfig.editMode === 'ai' && (
              <Alert severity="info" icon={<Sparkles />}>
                <Typography variant="body2">
                  <strong>AI 辅助生成：</strong>
                  系统已根据您的描述自动生成了系统提示词，您可以根据需要进行调整和优化。
                </Typography>
              </Alert>
            )}

            <Divider />

            {/* Prompt Tuning Section */}
            <div>
              <Typography variant="h6" className="mb-4">提示词调优</Typography>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <TextField
                  fullWidth
                  label="角色定义"
                  value={agentConfig.promptTuning.role}
                  onChange={(e) => setAgentConfig(prev => ({
                    ...prev,
                    promptTuning: { ...prev.promptTuning, role: e.target.value }
                  }))}
                  placeholder="例如：智能客服代表"
                />

                <TextField
                  fullWidth
                  label="行为特征"
                  value={agentConfig.promptTuning.behavior}
                  onChange={(e) => setAgentConfig(prev => ({
                    ...prev,
                    promptTuning: { ...prev.promptTuning, behavior: e.target.value }
                  }))}
                  placeholder="例如：友好、专业、准确"
                />
              </div>

              <TextField
                fullWidth
                multiline
                rows={3}
                label="示例对话"
                value={agentConfig.promptTuning.examples}
                onChange={(e) => setAgentConfig(prev => ({
                  ...prev,
                  promptTuning: { ...prev.promptTuning, examples: e.target.value }
                }))}
                placeholder="提供一些示例对话来指导智能体的响应模式..."
                className="mt-4"
              />
            </div>
          </div>
        </TabPanel>

        {/* Orchestration Configuration Tab */}
        <TabPanel value={activeTab} index={1}>
          <div className="space-y-6">
            {/* Model Selection */}
            <Accordion defaultExpanded>
              <AccordionSummary expandIcon={<Settings />}>
                <Typography variant="h6" className="flex items-center">
                  <Zap className="mr-2" />
                  模型选择与配置
                </Typography>
              </AccordionSummary>
              <AccordionDetails>
                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormControl fullWidth>
                      <InputLabel>LLM模型</InputLabel>
                      <Select
                        value={agentConfig.model}
                        label="LLM模型"
                        onChange={(e) => setAgentConfig(prev => ({ ...prev, model: e.target.value }))}
                      >
                        <MenuItem value="gpt-4">GPT-4</MenuItem>
                        <MenuItem value="gpt-3.5-turbo">GPT-3.5 Turbo</MenuItem>
                        <MenuItem value="claude-3">Claude-3</MenuItem>
                        <MenuItem value="gemini-pro">Gemini Pro</MenuItem>
                        <MenuItem value="qwen-plus">Qwen Plus</MenuItem>
                      </Select>
                    </FormControl>

                    <TextField
                      fullWidth
                      type="number"
                      label="温度 (Temperature)"
                      value={agentConfig.modelParams.temperature}
                      onChange={(e) => setAgentConfig(prev => ({
                        ...prev,
                        modelParams: { ...prev.modelParams, temperature: parseFloat(e.target.value) }
                      }))}
                      inputProps={{ min: 0, max: 2, step: 0.1 }}
                      helperText="控制输出的随机性"
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <TextField
                      fullWidth
                      type="number"
                      label="最大Token数"
                      value={agentConfig.modelParams.maxTokens}
                      onChange={(e) => setAgentConfig(prev => ({
                        ...prev,
                        modelParams: { ...prev.modelParams, maxTokens: parseInt(e.target.value) }
                      }))}
                      inputProps={{ min: 1, max: 8000 }}
                      helperText="限制单次对话的最大输出长度"
                    />

                    <TextField
                      fullWidth
                      type="number"
                      label="Top P"
                      value={agentConfig.modelParams.topP}
                      onChange={(e) => setAgentConfig(prev => ({
                        ...prev,
                        modelParams: { ...prev.modelParams, topP: parseFloat(e.target.value) }
                      }))}
                      inputProps={{ min: 0, max: 1, step: 0.1 }}
                      helperText="控制词汇选择的多样性"
                    />
                  </div>
                </div>
              </AccordionDetails>
            </Accordion>

            {/* Plugin and Workflow Selection */}
            <Accordion>
              <AccordionSummary expandIcon={<Settings />}>
                <Typography variant="h6" className="flex items-center">
                  <Plug className="mr-2" />
                  插件与工作流
                </Typography>
              </AccordionSummary>
              <AccordionDetails>
                <div className="space-y-4">
                  <div>
                    <Typography variant="subtitle1" className="mb-2">选择插件</Typography>
                    <div className="flex flex-wrap gap-2">
                      {['web_search', 'calculator', 'file_reader', 'image_generator', 'code_interpreter'].map((plugin) => (
                        <Chip
                          key={plugin}
                          label={plugin}
                          onClick={() => {
                            const isSelected = agentConfig.plugins.includes(plugin)
                            setAgentConfig(prev => ({
                              ...prev,
                              plugins: isSelected 
                                ? prev.plugins.filter(p => p !== plugin)
                                : [...prev.plugins, plugin]
                            }))
                          }}
                          color={agentConfig.plugins.includes(plugin) ? 'primary' : 'default'}
                          variant={agentConfig.plugins.includes(plugin) ? 'filled' : 'outlined'}
                        />
                      ))}
                    </div>
                  </div>

                  <div>
                    <Typography variant="subtitle1" className="mb-2">选择工作流</Typography>
                    <div className="flex flex-wrap gap-2">
                      {['customer_service', 'troubleshooting', 'data_analysis', 'content_generation'].map((workflow) => (
                        <Chip
                          key={workflow}
                          label={workflow}
                          onClick={() => {
                            const isSelected = agentConfig.workflows.includes(workflow)
                            setAgentConfig(prev => ({
                              ...prev,
                              workflows: isSelected 
                                ? prev.workflows.filter(w => w !== workflow)
                                : [...prev.workflows, workflow]
                            }))
                          }}
                          color={agentConfig.workflows.includes(workflow) ? 'primary' : 'default'}
                          variant={agentConfig.workflows.includes(workflow) ? 'filled' : 'outlined'}
                        />
                      ))}
                    </div>
                  </div>
                </div>
              </AccordionDetails>
            </Accordion>

            {/* Knowledge and Memory */}
            <Accordion>
              <AccordionSummary expandIcon={<Settings />}>
                <Typography variant="h6" className="flex items-center">
                  <BookOpen className="mr-2" />
                  知识与记忆
                </Typography>
              </AccordionSummary>
              <AccordionDetails>
                <div className="space-y-4">
                  <div>
                    <Typography variant="subtitle1" className="mb-2">知识库</Typography>
                    <div className="flex flex-wrap gap-2">
                      {['product_manual', 'faq_database', 'company_policies', 'user_guides'].map((knowledge) => (
                        <Chip
                          key={knowledge}
                          label={knowledge}
                          onClick={() => {
                            const isSelected = agentConfig.knowledge.includes(knowledge)
                            setAgentConfig(prev => ({
                              ...prev,
                              knowledge: isSelected 
                                ? prev.knowledge.filter(k => k !== knowledge)
                                : [...prev.knowledge, knowledge]
                            }))
                          }}
                          color={agentConfig.knowledge.includes(knowledge) ? 'primary' : 'default'}
                          variant={agentConfig.knowledge.includes(knowledge) ? 'filled' : 'outlined'}
                        />
                      ))}
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormControlLabel
                      control={
                        <Switch
                          checked={agentConfig.memory.enabled}
                          onChange={(e) => setAgentConfig(prev => ({
                            ...prev,
                            memory: { ...prev.memory, enabled: e.target.checked }
                          }))}
                        />
                      }
                      label="启用记忆功能"
                    />

                    <FormControl fullWidth>
                      <InputLabel>记忆类型</InputLabel>
                      <Select
                        value={agentConfig.memory.type}
                        label="记忆类型"
                        onChange={(e) => setAgentConfig(prev => ({
                          ...prev,
                          memory: { ...prev.memory, type: e.target.value as any }
                        }))}
                        disabled={!agentConfig.memory.enabled}
                      >
                        <MenuItem value="conversation">对话记忆</MenuItem>
                        <MenuItem value="semantic">语义记忆</MenuItem>
                        <MenuItem value="hybrid">混合记忆</MenuItem>
                      </Select>
                    </FormControl>
                  </div>
                </div>
              </AccordionDetails>
            </Accordion>

            {/* Opening Remarks */}
            <div>
              <Typography variant="h6" className="mb-4 flex items-center">
                <MessageSquare className="mr-2" />
                开场白设置
              </Typography>
              <TextField
                fullWidth
                multiline
                rows={3}
                label="开场白"
                value={agentConfig.openingRemarks}
                onChange={(e) => setAgentConfig(prev => ({ ...prev, openingRemarks: e.target.value }))}
                placeholder="设置智能体的开场白，让用户了解如何开始对话..."
                helperText="这是用户开始对话时智能体的第一句话"
              />
            </div>
          </div>
        </TabPanel>

        {/* Preview and Debug Tab */}
        <TabPanel value={activeTab} index={2}>
          <div className="space-y-6">
            {/* Test Input */}
            <div className="flex items-center space-x-4">
              <TextField
                fullWidth
                label="测试消息"
                value={testMessage}
                onChange={(e) => setTestMessage(e.target.value)}
                placeholder="输入测试消息来调试智能体..."
                onKeyPress={(e) => e.key === 'Enter' && handleTest()}
              />
              <Button
                variant="contained"
                startIcon={<Play />}
                onClick={handleTest}
                disabled={isTesting || !testMessage.trim()}
              >
                {isTesting ? '测试中...' : '发送测试'}
              </Button>
            </div>

            {/* Test History */}
            <div className="border rounded-lg p-4 bg-gray-50">
              <Typography variant="h6" className="mb-4">对话历史</Typography>
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {agentConfig.testHistory.length === 0 ? (
                  <p className="text-gray-500 text-center py-8">暂无对话记录，开始测试以查看效果</p>
                ) : (
                  agentConfig.testHistory.map((msg, index) => (
                    <div
                      key={index}
                      className={`p-3 rounded-lg ${
                        msg.role === 'user' 
                          ? 'bg-blue-100 ml-8' 
                          : 'bg-green-100 mr-8'
                      }`}
                    >
                      <div className="flex items-center justify-between mb-1">
                        <div className="font-medium text-sm">
                          {msg.role === 'user' ? '用户' : 'AI助手'}
                        </div>
                        <div className="text-xs text-gray-500">
                          {msg.timestamp.toLocaleTimeString()}
                        </div>
                      </div>
                      <div>{msg.content}</div>
                    </div>
                  ))
                )}
              </div>
            </div>

            {/* Debug Information */}
            <div className="border rounded-lg p-4 bg-blue-50">
              <Typography variant="h6" className="mb-4">调试信息</Typography>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div>
                  <strong>当前模型：</strong> {agentConfig.model}
                </div>
                <div>
                  <strong>温度设置：</strong> {agentConfig.modelParams.temperature}
                </div>
                <div>
                  <strong>启用插件：</strong> {agentConfig.plugins.join(', ') || '无'}
                </div>
                <div>
                  <strong>记忆状态：</strong> {agentConfig.memory.enabled ? '启用' : '禁用'}
                </div>
                <div>
                  <strong>编辑模式：</strong> {agentConfig.editMode === 'ai' ? 'AI辅助' : '手动编辑'}
                </div>
                <div>
                  <strong>对话轮数：</strong> {agentConfig.testHistory.length / 2}
                </div>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex items-center justify-between">
              <div className="flex space-x-2">
                <Button
                  variant="outlined"
                  startIcon={<Upload />}
                  component="label"
                >
                  导入配置
                  <input
                    type="file"
                    hidden
                    accept=".json"
                    onChange={handleImport}
                  />
                </Button>
                
                <Button
                  variant="outlined"
                  startIcon={<Download />}
                  onClick={handleExport}
                >
                  导出配置
                </Button>
              </div>

              <Button
                variant="outlined"
                color="error"
                startIcon={<Trash2 />}
                onClick={() => {
                  if (confirm('确定要删除这个智能体吗？')) {
                    navigate('/dashboard/agents')
                  }
                }}
              >
                删除智能体
              </Button>
            </div>
          </div>
        </TabPanel>
      </Card>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert 
          onClose={() => setSnackbar({ ...snackbar, open: false })} 
          severity={snackbar.severity}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </div>
  )
}

export default AgentEditorEnhancedPage