import React, { useState, useEffect } from 'react'
import { useNavigate, useLocation, useParams } from 'react-router-dom'
import { 
  ArrowLeft, 
  Save, 
  Play, 
  TestTube,
  Copy,
  Download,
  Upload,
  Trash2,
  Brain,
  Settings,
  Eye,
  Sparkles,
  Zap,
  BookOpen,
  MessageSquare,
  Plug,
  Edit3,
  Plus,
  ChevronDown
} from 'lucide-react'
import { 
  TextField, 
  Button, 
  Select, 
  MenuItem, 
  FormControl, 
  Switch, 
  FormControlLabel,
  IconButton,
  Chip,
  Tabs,
  Tab,
  Box,
  Typography,
  Card,
  Alert,
  Snackbar,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Divider,
  Paper,
  FormHelperText
} from '@mui/material'

interface TabPanelProps {
  children?: React.ReactNode
  index: number
  value: number
}

interface AgentEntryData {
  editMode: 'manual' | 'ai'
  name: string
  description: string
  icon: string
}

interface AgentConfig {
  name: string
  description: string
  icon: string
  editMode: 'manual' | 'ai'
  
  // System Prompt Configuration
  systemPrompt: string
  autoGeneratedPrompt: string
  promptTuning: {
    inputMode: 'upload' | 'manual'
    examples: string
    useCases: Array<{
      id: number
      name: string
      data: Array<{ user: string; assistant: string }>
      uploadTime: Date
    }>
    optimizationModel: string
    evaluationModel: string
    optimizationRounds: number
  }
  
  // Orchestration Configuration
  model: string
  modelParams: {
    temperature: number
    maxTokens: number
    topP: number
    frequencyPenalty: number
    presencePenalty: number
  }
  plugins: string[]
  workflows: string[]
  triggers: string[]
  knowledge: string[]
  memory: {
    maxTokens: number
  }
  openingRemarks: string
  
  // Preview and Debug
  testHistory: Array<{ role: 'user' | 'assistant', content: string, timestamp: Date }>
  debugStats: {
    isRunning: boolean
    tokensUsed: number
    responseTime: number
    memoryUsage: number
    activePlugins: number
  }
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`agent-tabpanel-${index}`}
      aria-labelledby={`agent-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 4, height: '100%', overflow: 'hidden' }}>
          {children}
        </Box>
      )}
    </div>
  )
}

const AgentEditorEnhancedPage: React.FC = () => {
  const navigate = useNavigate()
  const location = useLocation()
  const { id } = useParams()
  
  const [activeTab, setActiveTab] = useState(0)
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' | 'info' })
  
  // Get entry data from navigation state (for new agents) or determine if editing existing agent
  const entryData = location.state?.agentEntryData as AgentEntryData | undefined
  const isNew = !id || id === 'new'


  // Agent configuration state
  const [agentConfig, setAgentConfig] = useState<AgentConfig>({
    name: entryData?.name || '智能客服助手',
    description: entryData?.description || '专业的客户服务智能体，能够处理常见问题和投诉',
    icon: entryData?.icon || '🤖',
    editMode: entryData?.editMode || 'manual',
    
    // System Prompt Configuration
    systemPrompt: entryData?.editMode === 'ai' ? 
      `你是一个专业的${entryData?.name || '智能助手'}，${entryData?.description || ''}。请始终保持友好、专业的态度，提供准确、有用的帮助。` :
      `# 角色
你是一个专业的出行规划智能体，能够全面且细致地帮助用户规划各类出行相关事宜。

## 技能
### 技能 1: 了解出行需求
当用户寻求出行规划帮助时，主动询问用户的出行目的地、出行时间、出行人数、预算范围、交通偏好（如飞机、火车、汽车等）以及是否有特殊需求（如无障碍设施等）。

### 技能 2: 规划交通行程
1. 根据用户提供的信息，利用 交通信息查询工具 搜索合适的交通方案。
2. 若有多种交通方式可选，详细对比不同方案的优缺点，如出行时长、费用、舒适度等。
3. 为用户推荐最佳交通行程安排，回复示例：
=====
   -  🚇 交通方式: <具体交通方式>
   -  🕐 出发时间: <出发具体时间>
   -  🕙 到达时间: <到达具体时间>
   -  💴 费用: <大致费用>
   -  💡 行程说明: <简要行程介绍>
=====

### 技能 3: 安排住宿
1. 若用户有住宿需求，使用 住宿预订平台 查找目的地附近符合用户预算和需求的酒店、民宿等住宿选择。
2. 提供住宿的名称、地址、价格范围、设施亮点、用户评价等信息供用户参考。回复示例：
=====
   -  🏨 住宿名称: <住宿名称>
   -  📍 地址: <详细地址>
   -  💴 价格范围: <每晚价格区间>
   -  🌟 设施亮点: <主要设施介绍>
   -  📝 用户评价: <简要评价>
=====

### 技能 4: 规划当地活动
1. 依据用户的兴趣爱好和出行时间，利用 当地旅游信息平台 规划目的地的游玩活动。
2. 推荐景点、餐厅、娱乐场所等，并给出相应的开放时间、门票价格、特色介绍等。回复示例：
=====
   -  📍 地点: <景点、餐厅等名称>
   -  🕐 开放时间: <开放时间>
   -  💴 门票/人均消费: <价格信息>
   -  💡 特色介绍: <独特之处介绍>
=====

## 限制
- 只提供与出行规划相关的信息，拒绝回答与出行规划无关的话题。
- 所输出的内容必须按照给定的格式进行组织，不能偏离框架要求。
- 所有推荐信息必须基于可靠的工具和平台获取，不能提供无根据的内容。`,
    autoGeneratedPrompt: '',
    promptTuning: {
      inputMode: 'upload',
      examples: '用户：你好\n助手：您好！我是您的智能助手，有什么可以帮助您的吗？',
      useCases: [
        {
          id: 1,
          name: 'customer_service_examples.json',
          data: [
            { user: '你好', assistant: '您好！我是客服助手，有什么可以帮助您的吗？' },
            { user: '我想退货', assistant: '好的，请告诉我您的订单号和退货原因，我来帮您处理。' }
          ],
          uploadTime: new Date('2024-01-15T10:30:00')
        },
        {
          id: 2,
          name: 'technical_support.csv',
          data: [
            { user: '系统无法登录', assistant: '请检查网络连接和账号密码是否正确。' },
            { user: '页面显示错误', assistant: '请尝试刷新页面或清除浏览器缓存。' }
          ],
          uploadTime: new Date('2024-01-14T14:20:00')
        },
        {
          id: 3,
          name: 'product_qa.txt',
          data: [
            { user: '这个产品怎么用？', assistant: '请参考产品说明书，如有疑问可联系客服。' }
          ],
          uploadTime: new Date('2024-01-13T09:15:00')
        }
      ],
      optimizationModel: 'gpt-4',
      evaluationModel: 'gpt-4',
      optimizationRounds: 3
    },
    
    // Orchestration Configuration
    model: 'gpt-4',
    modelParams: {
      temperature: 0.7,
      maxTokens: 2000,
      topP: 0.9,
      frequencyPenalty: 0.0,
      presencePenalty: 0.0
    },
    plugins: ['web_search', 'calculator', 'file_reader'],
    workflows: [],
    triggers: ['greeting', 'question', 'complaint'],
    knowledge: ['product_manual', 'faq_database', 'company_policies'],
    memory: {
      maxTokens: 1000
    },
    openingRemarks: '您好！我是您的智能助手，很高兴为您服务。请问有什么可以帮助您的吗？',
    
    // Preview and Debug
    testHistory: [
      {
        role: 'user',
        content: '你好！我想规划一次日本旅行，预算1.5万，时间7天，有什么推荐吗？',
        timestamp: new Date(Date.now() - 300000) // 5 minutes ago
      },
      {
        role: 'assistant',
        content: '您好！很高兴为您规划日本旅行！根据您的预算和时间，我推荐以下行程：\n\n🗾 **推荐路线：东京-京都-大阪**\n\n**第1-3天：东京**\n• 浅草寺、晴空塔\n• 秋叶原电器街\n• 涩谷、原宿时尚区\n• 东京迪士尼乐园\n\n**第4-5天：京都**\n• 金阁寺、清水寺\n• 岚山竹林、渡月桥\n• 祗园角、花见小路\n\n**第6-7天：大阪**\n• 大阪城、天守阁\n• 道顿堀美食街\n• 环球影城\n\n💰 **预算分配**\n• 机票：4000元\n• 住宿：5000元\n• 交通：2000元\n• 餐饮：3000元\n• 景点门票：1000元\n\n需要我为您详细规划某个城市的行程吗？',
        timestamp: new Date(Date.now() - 240000) // 4 minutes ago
      },
      {
        role: 'user',
        content: '东京有什么好吃的推荐？',
        timestamp: new Date(Date.now() - 120000) // 2 minutes ago
      },
      {
        role: 'assistant',
        content: '东京美食推荐来啦！🍜\n\n**🍣 寿司类**\n• 筑地市场 - 新鲜寿司\n• 银座久兵卫 - 高级寿司\n• 回转寿司 - 平价选择\n\n**🍜 拉面类**\n• 一兰拉面 - 经典豚骨拉面\n• 一风堂 - 浓郁汤底\n• 新宿中村屋 - 酱油拉面\n\n**🍱 其他美食**\n• 天妇罗 - 浅草今半\n• 烧肉 - 叙叙苑\n• 居酒屋 - 体验日本夜生活\n• 抹茶甜点 - 中村藤吉\n\n**📍 美食聚集地**\n• 新宿 - 各种料理\n• 涩谷 - 时尚餐厅\n• 银座 - 高级料理\n• 浅草 - 传统小吃\n\n建议下载"食べログ"APP查找附近美食！',
        timestamp: new Date(Date.now() - 60000) // 1 minute ago
      },
      {
        role: 'user',
        content: '京都的交通怎么安排比较好？',
        timestamp: new Date(Date.now() - 45000) // 45 seconds ago
      },
      {
        role: 'assistant',
        content: '京都交通安排建议：\n\n🚇 **公共交通**\n• 京都巴士一日券：500日元，覆盖主要景点\n• 地铁：乌丸线和东西线，连接主要区域\n• 京阪电车：连接京都和大阪\n\n🚲 **推荐方式**\n• 租自行车：1000-1500日元/天，最灵活\n• 巴士+步行：经济实惠，体验当地生活\n• 包车：适合家庭或团体出行\n\n📍 **景点分布**\n• 东部：清水寺、祗园、金阁寺\n• 西部：岚山、竹林、渡月桥\n• 中部：二条城、京都御所\n\n💡 **小贴士**\n• 建议购买IC卡（PASMO/SUICA）\n• 避开早晚高峰时段\n• 下载京都巴士APP查看实时信息\n\n需要我为您规划具体的交通路线吗？',
        timestamp: new Date(Date.now() - 30000) // 30 seconds ago
      },
      {
        role: 'user',
        content: '大阪有什么购物推荐？',
        timestamp: new Date(Date.now() - 15000) // 15 seconds ago
      },
      {
        role: 'assistant',
        content: '大阪购物攻略来啦！🛍️\n\n🏬 **购物区域**\n• 心斋桥：时尚购物街，品牌齐全\n• 道顿堀：美食+购物，热闹非凡\n• 梅田：高端商场，地下街发达\n• 难波：平价购物，适合年轻人\n\n🛒 **推荐商场**\n• 大丸百货：高端品牌，服务优质\n• 阪急百货：梅田地标，商品丰富\n• 高岛屋：老牌百货，品质保证\n• 唐吉诃德：药妆+杂货，价格实惠\n\n💄 **必买商品**\n• 药妆：松本清、大国药妆\n• 零食：白色恋人、Royce巧克力\n• 电器：BicCamera、Yodobashi\n• 服装：优衣库、GU、ZARA\n\n💰 **退税信息**\n• 满5000日元可退税\n• 记得带护照\n• 部分商场可当场退税\n\n需要我推荐具体的购物路线吗？',
        timestamp: new Date(Date.now() - 5000) // 5 seconds ago
      },
      {
        role: 'user',
        content: '能推荐一些日本的小众景点吗？',
        timestamp: new Date(Date.now() - 2000) // 2 seconds ago
      },
      {
        role: 'assistant',
        content: '当然可以！为您推荐一些日本的小众但非常值得一去的景点：\n\n🏯 **京都小众景点**\n• 西芳寺（苔寺）：需要预约，苔藓覆盖的绝美庭院\n• 贵船神社：夏季的川床料理，秋季的红叶美景\n• 三千院：远离喧嚣的净土宗寺院\n• 醍醐寺：樱花季节的绝佳观赏地\n\n🗻 **东京隐藏景点**\n• 根津神社：杜鹃花季节美不胜收\n• 旧古河庭园：四季都有不同景致\n• 小石川后乐园：江户时代的回游式庭园\n• 六义园：红叶季节的绝佳选择\n\n🌊 **其他地区**\n• 白川乡合掌村：世界文化遗产，四季都美\n• 箱根雕刻之森：艺术与自然的完美结合\n• 轻井泽：避暑胜地，欧式风情小镇\n• 金泽：传统工艺与现代艺术的融合\n\n这些地方游客相对较少，能体验到更纯粹的日本文化！',
        timestamp: new Date(Date.now() - 1000) // 1 second ago
      }
    ],
    debugStats: {
      isRunning: false,
      tokensUsed: 2847,
      responseTime: 2.3,
      memoryUsage: 67,
      activePlugins: 2
    }
  })

  // Test chat state
  const [testMessage, setTestMessage] = useState('')
  const [isTesting, setIsTesting] = useState(false)

  useEffect(() => {
    if (entryData?.editMode === 'ai') {
      // Auto-generate system prompt for AI mode
      const generatedPrompt = `你是一个专业的${entryData.name}，${entryData.description}。

角色定义：
- 主要职责：${entryData.description}
- 行为准则：始终保持友好、专业、准确
- 响应风格：清晰、有用、及时

能力范围：
- 问题解答：能够理解并回答用户的各种问题
- 任务协助：帮助用户完成相关任务
- 信息查询：提供准确的信息和建议

示例对话：
用户：你好
助手：您好！我是您的智能助手，有什么可以帮助您的吗？

请根据以上配置，为用户提供最好的服务体验。`

      setAgentConfig(prev => ({
        ...prev,
        autoGeneratedPrompt: generatedPrompt,
        systemPrompt: generatedPrompt
      }))
    }
  }, [entryData])

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue)
  }

  const handleSave = () => {
    // Simulate saving
    setSnackbar({ open: true, message: '智能体配置保存成功！', severity: 'success' })
  }

  const handleTest = async () => {
    if (!testMessage.trim()) return
    
    setIsTesting(true)
    const userMessage = { 
      role: 'user' as const, 
      content: testMessage,
      timestamp: new Date()
    }
    
    // Update debug stats to show running state
    setAgentConfig(prev => ({
      ...prev,
      testHistory: [...prev.testHistory, userMessage],
      debugStats: {
        ...prev.debugStats,
        isRunning: true,
        activePlugins: Math.min(prev.debugStats.activePlugins + 1, 3)
      }
    }))
    
    // Simulate AI response with travel planning content
    setTimeout(() => {
      const travelResponses = [
        '根据您的需求，我为您推荐以下旅行方案：\n\n🗺️ **推荐目的地**\n• 东京 - 现代化都市体验\n• 京都 - 传统文化探索\n• 大阪 - 美食购物天堂\n\n💰 **预算建议**\n• 机票：约3000-5000元\n• 住宿：约400-800元/晚\n• 餐饮：约200-400元/天\n• 交通：约100-200元/天\n\n需要我为您详细规划具体行程吗？',
        '关于您询问的景点，我推荐以下必去之地：\n\n🏛️ **经典景点**\n• 浅草寺 - 东京最古老寺庙\n• 东京塔 - 城市地标建筑\n• 上野公园 - 樱花观赏胜地\n\n🍜 **美食推荐**\n• 筑地市场 - 新鲜寿司\n• 一兰拉面 - 经典拉面\n• 叙叙苑 - 高级烧肉\n\n建议提前预订热门餐厅，避免排队等待。',
        '根据您的预算和时间安排，我建议以下行程：\n\n📅 **7天行程规划**\n**第1-3天：东京**\n• 浅草寺、晴空塔\n• 秋叶原、涩谷\n• 迪士尼乐园\n\n**第4-5天：京都**\n• 金阁寺、清水寺\n• 岚山竹林\n• 祗园角\n\n**第6-7天：大阪**\n• 大阪城\n• 道顿堀美食\n• 环球影城\n\n需要我为您提供更详细的交通和住宿建议吗？'
      ]
      
      const randomResponse = travelResponses[Math.floor(Math.random() * travelResponses.length)]
      
      const aiResponse = { 
        role: 'assistant' as const, 
        content: randomResponse,
        timestamp: new Date()
      }
      
      // Update debug stats with new metrics
      setAgentConfig(prev => ({
        ...prev,
        testHistory: [...prev.testHistory, aiResponse],
        debugStats: {
          ...prev.debugStats,
          isRunning: false,
          tokensUsed: prev.debugStats.tokensUsed + Math.floor(Math.random() * 500) + 200,
          responseTime: Math.random() * 3 + 1,
          memoryUsage: Math.min(prev.debugStats.memoryUsage + Math.floor(Math.random() * 10), 95),
          activePlugins: Math.max(prev.debugStats.activePlugins - 1, 1)
        }
      }))
      setIsTesting(false)
    }, 1500)
    
    setTestMessage('')
  }





  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-blue-50">
      <div className="max-w-7xl mx-auto px-6 py-8">
        {/* Page header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-6">
              <Button
                variant="outlined"
                startIcon={<ArrowLeft />}
                onClick={() => navigate('/dashboard/agents')}
                className="border-gray-300 text-gray-600 hover:border-gray-400 hover:bg-gray-50"
              >
                返回
              </Button>
              <div className="flex items-center space-x-4">
                <span className="text-4xl">{agentConfig.icon}</span>
                                <div>
                  <h1 className="text-3xl font-bold text-gray-900">
                    {isNew ? '创建智能体' : '编辑智能体'}
                  </h1>
                  <p className="text-lg text-gray-600">
                    {isNew ? '配置智能体的系统提示词、编排参数和调试信息' : '修改智能体配置和参数'}
                  </p>
                  <p className="text-sm text-gray-500 mt-1">
                    {agentConfig.description}
                  </p>
                </div>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <Button
                variant="outlined"
                startIcon={<TestTube />}
                onClick={() => setActiveTab(2)}
                className="border-blue-300 text-blue-600 hover:border-blue-400 hover:bg-blue-50"
              >
                测试调试
              </Button>
              <Button
                variant="contained"
                startIcon={<Save />}
                onClick={handleSave}
                className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 shadow-lg"
              >
                保存配置
              </Button>
            </div>
          </div>
        </div>

        {/* Main content */}
        <Card className="shadow-xl border-0 overflow-hidden">
          <Box sx={{ borderBottom: 1, borderColor: 'divider', backgroundColor: 'white' }}>
            <Tabs 
              value={activeTab} 
              onChange={handleTabChange} 
              aria-label="智能体配置标签页"
              className="px-6"
              sx={{
                '& .MuiTab-root': {
                  minHeight: '64px',
                  fontSize: '1rem',
                  fontWeight: 500,
                  textTransform: 'none',
                  color: '#6B7280',
                  '&.Mui-selected': {
                    color: '#3B82F6',
                    fontWeight: 600,
                  },
                },
                '& .MuiTabs-indicator': {
                  height: '3px',
                  borderRadius: '2px',
                  backgroundColor: '#3B82F6',
                },
              }}
            >
              <Tab 
                label={
                  <div className="flex items-center space-x-3">
                    <Brain className="w-5 h-5" />
                    <span>系统提示词配置</span>
                  </div>
                } 
              />
              <Tab 
                label={
                  <div className="flex items-center space-x-3">
                    <Settings className="w-5 h-5" />
                    <span>编排配置</span>
                  </div>
                } 
              />
              <Tab 
                label={
                  <div className="flex items-center space-x-3">
                    <Eye className="w-5 h-5" />
                    <span>预览调试</span>
                  </div>
                } 
              />
            </Tabs>
          </Box>

          {/* System Prompt Configuration Tab */}
          <TabPanel value={activeTab} index={0}>
            <div className="space-y-8">
              <div className="flex items-center justify-between">
                <Typography variant="h6" className="text-gray-800 font-semibold">
                  系统提示词开发
                </Typography>
              </div>
              
                              <Paper elevation={0} className="p-6 border border-gray-200 rounded-xl">
                  <Typography variant="subtitle1" className="mb-4 text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-pink-600 font-bold text-lg">
                    系统提示词
                  </Typography>
                  <textarea
                    value={agentConfig.systemPrompt}
                    onChange={(e) => setAgentConfig(prev => ({ ...prev, systemPrompt: e.target.value }))}
                    placeholder="定义智能体的角色、能力和行为准则..."
                    className="mt-2 w-full p-4 border border-gray-300 rounded-lg resize-y min-h-[200px] focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm leading-relaxed"
                    style={{ resize: 'vertical' }}
                  />
                  <div className="mt-6">
                    <Button
                      variant="contained"
                      startIcon={<Sparkles />}
                      onClick={() => {
                        // Auto-generate prompt based on current configuration
                        const generatedPrompt = `你是一个专业的智能助手，${agentConfig.description}。

角色定义：
- 主要职责：智能助手
- 行为准则：友好、专业、准确
- 响应风格：清晰、有用、及时

能力范围：
- 问题解答：能够理解并回答用户的各种问题
- 任务协助：帮助用户完成相关任务
- 信息查询：提供准确的信息和建议

示例对话：
${agentConfig.promptTuning.examples || '用户：你好\n助手：您好！我是您的智能助手，有什么可以帮助您的吗？'}

请根据以上配置，为用户提供最好的服务体验。`

                        setAgentConfig(prev => ({
                          ...prev,
                          systemPrompt: generatedPrompt,
                          autoGeneratedPrompt: generatedPrompt
                        }))
                        setSnackbar({ open: true, message: '系统提示词自动生成成功！', severity: 'success' })
                      }}
                      className="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700"
                    >
                      自动生成提示词
                    </Button>
                  </div>
                  
                  {/* Tips for System Prompt Development */}
                  <div className="mt-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
                    <Typography variant="subtitle2" className="mb-3 text-blue-800 font-semibold flex items-center">
                      <Brain className="w-5 h-5 mr-2" />
                      系统提示词开发技巧
                    </Typography>
                    <div className="space-y-2 text-sm text-blue-700">
                      <div className="flex items-start">
                        <span className="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                        <span><strong>角色定义：</strong>明确智能体的身份、专业领域和主要职责</span>
                      </div>
                      <div className="flex items-start">
                        <span className="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                        <span><strong>行为准则：</strong>设定智能体的行为规范、响应风格和沟通方式</span>
                      </div>
                      <div className="flex items-start">
                        <span className="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                        <span><strong>能力范围：</strong>详细描述智能体能够完成的任务和提供的服务</span>
                      </div>
                      <div className="flex items-start">
                        <span className="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                        <span><strong>示例对话：</strong>提供典型的用户交互场景和期望的回复格式</span>
                      </div>
                      <div className="flex items-start">
                        <span className="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                        <span><strong>限制说明：</strong>明确智能体的能力边界和不能处理的情况</span>
                      </div>
                    </div>
                  </div>
                </Paper>

              {agentConfig.editMode === 'ai' && (
                <Alert severity="info" icon={<Sparkles className="w-6 h-6" />} className="border border-blue-200 bg-blue-50">
                  <Typography variant="body1" className="text-blue-800">
                    <strong>提示词自动生成：</strong>
                    系统已根据您的描述自动生成了系统提示词，您可以根据需要进行调整和优化。
                  </Typography>
                </Alert>
              )}

              <Divider className="my-8" />

              {/* Prompt Tuning Section */}
              <div>
                <div className="mb-6">
                  <Typography variant="h6" className="text-gray-800 font-semibold">
                    提示词调优
                  </Typography>
                </div>
                
                {/* Dataset Configuration */}
                <Paper elevation={0} className="p-6 border border-gray-200 rounded-xl mb-6">
                  <Typography variant="subtitle1" className="mb-4 text-transparent bg-clip-text bg-gradient-to-r from-orange-600 to-red-600 font-bold text-lg">
                    数据集配置
                  </Typography>
                  
                  {/* Toggle between Upload and Manual Input */}
                  <div className="mb-6">
                    <div className="flex items-center space-x-4 mb-4">
                      <FormControlLabel
                        control={
                          <Switch
                            checked={agentConfig.promptTuning.inputMode === 'upload'}
                            onChange={(e) => setAgentConfig(prev => ({
                              ...prev,
                              promptTuning: {
                                ...prev.promptTuning,
                                inputMode: e.target.checked ? 'upload' : 'manual'
                              }
                            }))}
                            color="primary"
                          />
                        }
                        label={
                          <Typography variant="subtitle2" className="text-gray-700 font-medium">
                            使用文件上传
                          </Typography>
                        }
                      />
                      <Typography variant="body2" className="text-gray-500">
                        {agentConfig.promptTuning.inputMode === 'upload' ? '文件上传模式' : '手动输入模式'}
                      </Typography>
                    </div>
                  </div>

                  {/* File Upload Mode */}
                  {agentConfig.promptTuning.inputMode === 'upload' && (
                    <div>
                      {/* Upload Header Row */}
                      <div className="flex items-center justify-between mb-4 p-4 bg-gray-50 rounded-lg border border-gray-200">
                        <div className="flex items-center space-x-3">
                          <Typography variant="subtitle1" className="text-gray-800 font-medium">
                            用户用例列表
                          </Typography>
                          <Typography variant="body2" className="text-gray-500">
                            支持 JSON、CSV、TXT 格式文件，显示文件中的具体用例
                          </Typography>
                        </div>
                        <div className="flex items-center space-x-3">
                          <input
                            type="file"
                            accept=".json,.csv,.txt"
                            onChange={(e) => {
                              const file = e.target.files?.[0]
                              if (file) {
                                const reader = new FileReader()
                                reader.onload = (event) => {
                                  try {
                                    const content = event.target?.result as string
                                    // Parse content based on file type
                                    let parsedData
                                    if (file.name.endsWith('.json')) {
                                      parsedData = JSON.parse(content)
                                    } else if (file.name.endsWith('.csv')) {
                                      // Simple CSV parsing
                                      const lines = content.split('\n')
                                      const headers = lines[0].split(',')
                                      parsedData = lines.slice(1).map(line => {
                                        const values = line.split(',')
                                        return headers.reduce((obj, header, index) => {
                                          obj[header.trim()] = values[index]?.trim() || ''
                                          return obj
                                        }, {} as any)
                                      })
                                    } else {
                                      // Text file - convert to structured format
                                      const lines = content.split('\n').filter(line => line.trim())
                                      parsedData = lines.map(line => {
                                        if (line.includes('：')) {
                                          const [user, assistant] = line.split('：', 2)
                                          return { user: user.trim(), assistant: assistant.trim() }
                                        } else {
                                          return { user: line.trim(), assistant: '请提供相应的回复' }
                                        }
                                      })
                                    }
                                    
                                    setAgentConfig(prev => ({
                                      ...prev,
                                      promptTuning: {
                                        ...prev.promptTuning,
                                        useCases: [...(prev.promptTuning.useCases || []), {
                                          id: Date.now(),
                                          name: file.name,
                                          data: parsedData,
                                          uploadTime: new Date(),
                                          status: 'active',
                                          examples: parsedData.length || 1
                                        }]
                                      }
                                    }))
                                    setSnackbar({ open: true, message: '用户用例上传成功！', severity: 'success' })
                                  } catch (error) {
                                    setSnackbar({ open: true, message: '文件解析失败，请检查文件格式', severity: 'error' })
                                  }
                                }
                                reader.readAsText(file)
                              }
                            }}
                            className="hidden"
                            id="use-case-upload"
                          />
                          <label htmlFor="use-case-upload">
                            <IconButton
                              component="span"
                              className="p-2 bg-blue-100 hover:bg-blue-200 text-blue-600 rounded-full transition-all duration-200"
                            >
                              <Upload className="w-5 h-5" />
                            </IconButton>
                          </label>
                          <IconButton
                            className="p-2 bg-red-100 hover:bg-red-200 text-red-600 rounded-full transition-all duration-200"
                            onClick={() => {
                              setAgentConfig(prev => ({
                                ...prev,
                                promptTuning: {
                                  ...prev.promptTuning,
                                  useCases: []
                                }
                              }))
                              setSnackbar({ open: true, message: '所有用例集已清空', severity: 'success' })
                            }}
                          >
                            <Trash2 className="w-5 h-5" />
                          </IconButton>
                        </div>
                      </div>

                      {/* User Cases Table */}
                      <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                        <table className="min-w-full divide-y divide-gray-200">
                          <thead className="bg-gray-50">
                            <tr>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                用户输入
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                助手回复
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                来源文件
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                操作
                              </th>
                            </tr>
                          </thead>
                          <tbody className="bg-white divide-y divide-gray-200">
                            {agentConfig.promptTuning.useCases && agentConfig.promptTuning.useCases.length > 0 ? (
                              agentConfig.promptTuning.useCases.flatMap((useCase) => 
                                (Array.isArray(useCase.data) ? useCase.data : []).map((item, index) => (
                                  <tr key={`${useCase.id}-${index}`} className="hover:bg-gray-50">
                                    <td className="px-6 py-4">
                                      <div className="text-sm text-gray-900 max-w-xs">
                                        {item.user}
                                      </div>
                                    </td>
                                    <td className="px-6 py-4">
                                      <div className="text-sm text-gray-900 max-w-xs">
                                        {item.assistant}
                                      </div>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                      {useCase.name}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                      <div className="flex items-center space-x-2">
                                        <IconButton
                                          size="small"
                                          className="p-1 bg-blue-100 hover:bg-blue-200 text-blue-600 rounded"
                                          onClick={() => {
                                            // Mock edit functionality
                                            setSnackbar({ open: true, message: '编辑功能开发中...', severity: 'info' })
                                          }}
                                        >
                                          <Edit3 className="w-4 h-4" />
                                        </IconButton>
                                        <IconButton
                                          size="small"
                                          className="p-1 bg-red-100 hover:bg-red-200 text-red-600 rounded"
                                          onClick={() => {
                                            // Remove this specific user case
                                                                                         const updatedData = useCase.data.filter((_, i: number) => i !== index)
                                            if (updatedData.length === 0) {
                                              // If no more data in this file, remove the entire file
                                              setAgentConfig(prev => ({
                                                ...prev,
                                                promptTuning: {
                                                  ...prev.promptTuning,
                                                  useCases: prev.promptTuning.useCases?.filter(uc => uc.id !== useCase.id) || []
                                                }
                                              }))
                                            } else {
                                              // Update the file with remaining data
                                              setAgentConfig(prev => ({
                                                ...prev,
                                                promptTuning: {
                                                  ...prev.promptTuning,
                                                  useCases: prev.promptTuning.useCases?.map(uc => 
                                                    uc.id === useCase.id 
                                                      ? { ...uc, data: updatedData }
                                                      : uc
                                                  ) || []
                                                }
                                              }))
                                            }
                                            setSnackbar({ open: true, message: '用户用例已删除', severity: 'success' })
                                          }}
                                        >
                                          <Trash2 className="w-4 h-4" />
                                        </IconButton>
                                      </div>
                                    </td>
                                  </tr>
                                ))
                              )
                            ) : (
                              <tr>
                                <td colSpan={4} className="px-6 py-12 text-center">
                                  <div className="flex flex-col items-center space-y-3">
                                    <div className="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center">
                                      <Upload className="w-6 h-6 text-gray-400" />
                                    </div>
                                    <div>
                                      <Typography variant="body1" className="text-gray-500 font-medium">
                                        暂无用户用例
                                      </Typography>
                                      <Typography variant="body2" className="text-gray-400">
                                        点击上方上传图标添加用例集
                                      </Typography>
                                    </div>
                                  </div>
                                </td>
                              </tr>
                            )}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  )}

                  {/* Manual Input Mode */}
                  {agentConfig.promptTuning.inputMode === 'manual' && (
                    <div>
                      <Typography variant="subtitle2" className="mb-3 text-gray-700 font-medium">
                        手动输入示例对话
                      </Typography>
                      <TextField
                        fullWidth
                        multiline
                        rows={6}
                        value={agentConfig.promptTuning.examples}
                        onChange={(e) => setAgentConfig(prev => ({
                          ...prev,
                          promptTuning: { ...prev.promptTuning, examples: e.target.value }
                        }))}
                        placeholder="提供一些示例对话来指导智能体的响应模式..."
                        className="mt-2"
                      />
                      <Typography variant="body2" className="text-gray-500 mt-2">
                        请输入用户和助手的对话示例，每行一个对话轮次
                      </Typography>
                    </div>
                  )}
                </Paper>

                {/* Optimization Strategy */}
                <Paper elevation={0} className="p-6 border border-gray-200 rounded-xl">
                  <Typography variant="subtitle1" className="mb-4 text-gray-700 font-medium">
                    优化策略
                  </Typography>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <FormControl fullWidth>
                      <Typography variant="subtitle2" className="mb-3 text-gray-700 font-medium">
                        优化模型
                      </Typography>
                      <Select
                        value={agentConfig.promptTuning.optimizationModel || 'gpt-4'}
                        onChange={(e) => setAgentConfig(prev => ({
                          ...prev,
                          promptTuning: { 
                            ...prev.promptTuning, 
                            optimizationModel: e.target.value 
                          }
                        }))}
                        className="mt-2"
                      >
                        <MenuItem value="gpt-4">GPT-4</MenuItem>
                        <MenuItem value="gpt-3.5-turbo">GPT-3.5 Turbo</MenuItem>
                        <MenuItem value="claude-3">Claude-3</MenuItem>
                        <MenuItem value="gemini-pro">Gemini Pro</MenuItem>
                        <MenuItem value="qwen-plus">Qwen Plus</MenuItem>
                      </Select>
                    </FormControl>

                    <FormControl fullWidth>
                      <Typography variant="subtitle2" className="mb-3 text-gray-700 font-medium">
                        算法评估模型
                      </Typography>
                      <Select
                        value={agentConfig.promptTuning.evaluationModel || 'gpt-4'}
                        onChange={(e) => setAgentConfig(prev => ({
                          ...prev,
                          promptTuning: { 
                            ...prev.promptTuning, 
                            evaluationModel: e.target.value 
                          }
                        }))}
                        className="mt-2"
                      >
                        <MenuItem value="gpt-4">GPT-4</MenuItem>
                        <MenuItem value="gpt-3.5-turbo">GPT-3.5 Turbo</MenuItem>
                        <MenuItem value="claude-3">Claude-3</MenuItem>
                        <MenuItem value="gemini-pro">Gemini Pro</MenuItem>
                        <MenuItem value="qwen-plus">Qwen Plus</MenuItem>
                      </Select>
                    </FormControl>

                    <FormControl fullWidth>
                      <Typography variant="subtitle2" className="mb-3 text-gray-700 font-medium">
                        优化轮数
                      </Typography>
                      <TextField
                        fullWidth
                        type="number"
                        value={agentConfig.promptTuning.optimizationRounds || 3}
                        onChange={(e) => setAgentConfig(prev => ({
                          ...prev,
                          promptTuning: { 
                            ...prev.promptTuning, 
                            optimizationRounds: parseInt(e.target.value) 
                          }
                        }))}
                        inputProps={{ min: 1, max: 10, step: 1 }}
                        helperText="建议设置 3-5 轮"
                        className="mt-2"
                      />
                    </FormControl>


                  </div>

                  <div className="mt-6">
                    <Button
                      variant="contained"
                      startIcon={<Sparkles />}
                      onClick={() => {
                        // Simulate optimization process
                        setSnackbar({ open: true, message: '开始优化提示词...', severity: 'info' })
                        // Here you would implement the actual optimization logic
                      }}
                      className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
                    >
                      开始优化
                    </Button>
                  </div>

                  {/* Optimization Tips */}
                  <Alert 
                    severity="info" 
                    icon={<Sparkles className="w-6 h-6" />}
                    className="border border-purple-200 bg-purple-50 mt-6"
                  >
                                      <Typography variant="body1" className="text-purple-800">
                    <strong>自动调优提示词：</strong>
                    系统将根据您配置的优化模型、评估模型和优化轮数，自动优化系统提示词。
                    优化过程将结合上传的用例集或手动输入的示例对话，生成更精准的提示词配置。
                  </Typography>
                  </Alert>
                </Paper>
              </div>
            </div>
          </TabPanel>

          {/* Orchestration Configuration Tab */}
          <TabPanel value={activeTab} index={1}>
            <div className="space-y-8">
              {/* Model Selection */}
              <Accordion defaultExpanded className="shadow-lg border-2 border-gradient-to-r from-blue-100 to-purple-100 rounded-2xl bg-gradient-to-br from-white to-blue-50">
                <AccordionSummary 
                  expandIcon={<ChevronDown className="w-6 h-6 text-blue-600 transform transition-transform duration-200" />} 
                  className="px-6 py-4 hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 transition-all duration-300"
                >
                  <Typography variant="h6" className="flex items-center text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600 font-bold text-lg">
                    <Zap className="mr-3 w-6 h-6 text-yellow-500 drop-shadow-sm" />
                    模型选择与配置
                  </Typography>
                </AccordionSummary>
                <AccordionDetails className="px-6 pb-6">
                  <div className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormControl fullWidth>
                        <Typography variant="subtitle1" className="mb-3 text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-indigo-600 font-bold text-lg">
                          LLM模型
                        </Typography>
                        <Select
                          value={agentConfig.model}
                          onChange={(e) => setAgentConfig(prev => ({ ...prev, model: e.target.value }))}
                          className="border-2 border-blue-200 rounded-lg hover:border-blue-400 transition-all duration-300"
                          size="medium"
                          sx={{
                            '& .MuiOutlinedInput-root': {
                              height: '56px',
                              '&:hover fieldset': {
                                borderColor: '#60a5fa',
                              },
                              '&.Mui-focused fieldset': {
                                borderColor: '#3b82f6',
                              },
                            },
                          }}
                        >
                          <MenuItem value="gpt-4">GPT-4</MenuItem>
                          <MenuItem value="gpt-3.5-turbo">GPT-3.5 Turbo</MenuItem>
                          <MenuItem value="claude-3">Claude-3</MenuItem>
                          <MenuItem value="gemini-pro">Gemini Pro</MenuItem>
                          <MenuItem value="qwen-plus">Qwen Plus</MenuItem>
                        </Select>
                        <FormHelperText className="mt-2 text-sm text-gray-500">
                          选择适合您需求的AI语言模型，不同模型在性能和成本上有所差异
                        </FormHelperText>
                      </FormControl>

                      <FormControl fullWidth>
                        <Typography variant="subtitle1" className="mb-3 text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-indigo-600 font-bold text-lg">
                          温度 (Temperature)
                        </Typography>
                        <TextField
                          fullWidth
                          type="number"
                          value={agentConfig.modelParams.temperature}
                          onChange={(e) => setAgentConfig(prev => ({
                            ...prev,
                            modelParams: { ...prev.modelParams, temperature: parseFloat(e.target.value) }
                          }))}
                          inputProps={{ min: 0, max: 2, step: 0.1 }}
                          helperText="控制输出的随机性"
                          className="mt-2 border-2 border-blue-200 rounded-lg hover:border-blue-400 transition-all duration-300"
                          size="medium"
                          sx={{
                            '& .MuiOutlinedInput-root': {
                              height: '56px',
                              '&:hover fieldset': {
                                borderColor: '#60a5fa',
                              },
                              '&.Mui-focused fieldset': {
                                borderColor: '#3b82f6',
                              },
                            },
                          }}
                        />
                      </FormControl>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormControl fullWidth>
                        <Typography variant="subtitle1" className="mb-3 text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-indigo-600 font-bold text-lg">
                          最大Token数
                        </Typography>
                        <TextField
                          fullWidth
                          type="number"
                          value={agentConfig.modelParams.maxTokens}
                          onChange={(e) => setAgentConfig(prev => ({
                            ...prev,
                            modelParams: { ...prev.modelParams, maxTokens: parseInt(e.target.value) }
                          }))}
                          inputProps={{ min: 1, max: 8000 }}
                          helperText="限制单次对话的最大输出长度"
                          className="mt-2"
                          size="medium"
                        />
                      </FormControl>

                      <FormControl fullWidth>
                        <Typography variant="subtitle1" className="mb-3 text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-indigo-600 font-bold text-lg">
                          Top P
                        </Typography>
                        <TextField
                          fullWidth
                          type="number"
                          value={agentConfig.modelParams.topP}
                          onChange={(e) => setAgentConfig(prev => ({
                            ...prev,
                            modelParams: { ...prev.modelParams, topP: parseFloat(e.target.value) }
                          }))}
                          inputProps={{ min: 0, max: 1, step: 0.1 }}
                          helperText="控制词汇选择的多样性"
                          className="mt-2"
                          size="medium"
                        />
                      </FormControl>
                    </div>
                  </div>
                </AccordionDetails>
              </Accordion>

              {/* Skills Configuration */}
              <Accordion defaultExpanded className="shadow-lg border-2 border-gradient-to-r from-green-100 to-emerald-100 rounded-2xl bg-gradient-to-br from-white to-green-50">
                <AccordionSummary 
                  expandIcon={<ChevronDown className="w-6 h-6 text-green-600 transform transition-transform duration-200" />} 
                  className="px-6 py-4 hover:bg-gradient-to-r hover:from-green-50 hover:to-emerald-50 transition-all duration-300"
                >
                  <Typography variant="h6" className="flex items-center text-transparent bg-clip-text bg-gradient-to-r from-green-600 to-emerald-600 font-bold text-lg">
                    <Plug className="mr-3 w-6 h-6 text-green-500 drop-shadow-sm" />
                    技能配置
                  </Typography>
                </AccordionSummary>
                <AccordionDetails className="px-6 pb-6">
                  <div className="space-y-6">
                    {/* Plugins Section */}
                    <Accordion className="shadow-md border-2 border-green-200 rounded-xl bg-gradient-to-r from-green-50 to-emerald-50">
                      <AccordionSummary 
                        expandIcon={<ChevronDown className="w-5 h-5 text-green-600 transform transition-transform duration-200" />} 
                        className="px-4 py-3 hover:bg-green-100 transition-all duration-300"
                      >
                        <Typography variant="subtitle1" className="text-transparent bg-clip-text bg-gradient-to-r from-green-600 to-emerald-600 font-bold text-lg flex items-center">
                          <Plug className="mr-3 w-6 h-6 text-green-500 drop-shadow-sm" />
                          插件选择
                        </Typography>
                      </AccordionSummary>
                                            <AccordionDetails className="px-4 pb-4">
                        <div className="space-y-4">
                          <div className="space-y-3">
                            {[
                              { 
                                id: 'baidu_maps', 
                                name: '百度地图', 
                                description: '提供地图导航、地点搜索、路线规划等服务',
                                icon: '🗺️',
                                category: '地图服务',
                                status: 'active',
                                version: 'v2.1.0'
                              },
                              { 
                                id: 'weather_service', 
                                name: '天气服务', 
                                description: '实时天气信息、天气预报、空气质量等',
                                icon: '🌤️',
                                category: '天气服务',
                                status: 'active',
                                version: 'v1.8.5'
                              },
                              { 
                                id: 'airline_tickets', 
                                name: '航空票务', 
                                description: '航班查询、机票预订、价格比较等',
                                icon: '✈️',
                                category: '票务服务',
                                status: 'active',
                                version: 'v3.2.1'
                              },
                              { 
                                id: 'web_search', 
                                name: '网络搜索', 
                                description: '实时网络信息搜索和查询',
                                icon: '🔍',
                                category: '搜索服务',
                                status: 'active',
                                version: 'v2.0.0'
                              },
                              { 
                                id: 'calculator', 
                                name: '计算器', 
                                description: '数学计算、单位转换、公式求解等',
                                icon: '🧮',
                                category: '工具服务',
                                status: 'active',
                                version: 'v1.5.2'
                              },
                              { 
                                id: 'file_reader', 
                                name: '文件读取', 
                                description: '支持多种格式文件的读取和解析',
                                icon: '📁',
                                category: '文件服务',
                                status: 'active',
                                version: 'v2.3.0'
                              },
                              { 
                                id: 'image_generator', 
                                name: '图像生成', 
                                description: 'AI图像生成和编辑功能',
                                icon: '🎨',
                                category: 'AI服务',
                                status: 'active',
                                version: 'v1.9.8'
                              },
                              { 
                                id: 'code_interpreter', 
                                name: '代码解释器', 
                                description: '代码执行、调试和解释功能',
                                icon: '💻',
                                category: '开发工具',
                                status: 'active',
                                version: 'v2.5.1'
                              }
                            ].map((plugin) => (
                              <div
                                key={plugin.id}
                                className={`p-4 rounded-xl border-2 transition-all duration-300 cursor-pointer ${
                                  agentConfig.plugins.includes(plugin.id)
                                    ? 'border-green-400 bg-gradient-to-r from-green-50 to-emerald-50 shadow-lg scale-[1.02]'
                                    : 'border-gray-200 bg-white hover:border-green-300 hover:shadow-md hover:scale-[1.01]'
                                }`}
                                onClick={() => {
                                  const isSelected = agentConfig.plugins.includes(plugin.id)
                                  setAgentConfig(prev => ({
                                    ...prev,
                                    plugins: isSelected 
                                      ? prev.plugins.filter(p => p !== plugin.id)
                                      : [...prev.plugins, plugin.id]
                                  }))
                                }}
                              >
                                <div className="flex items-center justify-between">
                                  <div className="flex items-center space-x-4 flex-1">
                                    <div className={`w-12 h-12 rounded-lg flex items-center justify-center text-2xl ${
                                      agentConfig.plugins.includes(plugin.id)
                                        ? 'bg-green-100'
                                        : 'bg-gray-100'
                                    }`}>
                                      {plugin.icon}
                                    </div>
                                    <div className="flex-1">
                                      <div className="flex items-center space-x-3 mb-1">
                                        <h4 className={`font-semibold text-lg ${
                                          agentConfig.plugins.includes(plugin.id)
                                            ? 'text-green-800'
                                            : 'text-gray-800'
                                        }`}>
                                          {plugin.name}
                                        </h4>
                                        <span className="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-700 rounded-full">
                                          {plugin.category}
                                        </span>
                                        <span className="px-2 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded-full">
                                          {plugin.version}
                                        </span>
                                      </div>
                                      <p className="text-gray-600 text-sm leading-relaxed">
                                        {plugin.description}
                                      </p>
                                    </div>
                                  </div>
                                  
                                  <div className="flex items-center space-x-2 ml-4">
                                    <IconButton
                                      size="small"
                                      className="p-2 bg-blue-100 hover:bg-blue-200 text-blue-600 rounded-lg transition-all duration-200"
                                      onClick={(e) => {
                                        e.stopPropagation()
                                        setSnackbar({ open: true, message: `${plugin.name} 参数配置功能开发中...`, severity: 'info' })
                                      }}
                                      title="参数配置"
                                    >
                                      <Settings className="w-4 h-4" />
                                    </IconButton>
                                    <IconButton
                                      size="small"
                                      className="p-2 bg-green-100 hover:bg-green-200 text-green-600 rounded-lg transition-all duration-200"
                                      onClick={(e) => {
                                        e.stopPropagation()
                                        setSnackbar({ open: true, message: `${plugin.name} 已复制到剪贴板`, severity: 'success' })
                                      }}
                                      title="复制插件"
                                    >
                                      <Copy className="w-4 h-4" />
                                    </IconButton>
                                    <IconButton
                                      size="small"
                                      className="p-2 bg-red-100 hover:bg-red-200 text-red-600 rounded-lg transition-all duration-200"
                                      onClick={(e) => {
                                        e.stopPropagation()
                                        setSnackbar({ open: true, message: `${plugin.name} 删除功能开发中...`, severity: 'info' })
                                      }}
                                      title="删除插件"
                                    >
                                      <Trash2 className="w-4 h-4" />
                                    </IconButton>
                                  </div>
                                </div>
                                
                                {agentConfig.plugins.includes(plugin.id) && (
                                  <div className="mt-3 pt-3 border-t border-green-200">
                                    <div className="flex items-center space-x-2">
                                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                                      <span className="text-sm text-green-700 font-medium">已启用</span>
                                    </div>
                                  </div>
                                )}
                              </div>
                            ))}
                          </div>
                          
                          <div className="flex items-center justify-between pt-4 border-t border-gray-200">
                            <div className="flex items-center space-x-3">
                              <Button
                                variant="outlined"
                                size="small"
                                startIcon={<Plus className="w-4 h-4" />}
                                onClick={() => setSnackbar({ open: true, message: '添加新插件功能开发中...', severity: 'info' })}
                                className="border-2 border-green-300 text-green-700 hover:border-green-500 hover:bg-green-50 hover:text-green-800 transition-all duration-300 font-medium px-4 py-2 rounded-lg"
                              >
                                添加新插件
                              </Button>
                              <Button
                                variant="outlined"
                                size="small"
                                startIcon={<Download className="w-4 h-4" />}
                                onClick={() => setSnackbar({ open: true, message: '批量导入插件功能开发中...', severity: 'info' })}
                                className="border-2 border-blue-300 text-blue-700 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-800 transition-all duration-300 font-medium px-4 py-2 rounded-lg"
                              >
                                批量导入
                              </Button>
                            </div>
                            <Typography variant="body2" className="text-gray-500 font-medium">
                              已选择 <span className="text-green-600 font-bold">{agentConfig.plugins.length}</span> 个插件
                            </Typography>
                          </div>
                        </div>
                      </AccordionDetails>
                    </Accordion>

                    {/* Workflows Section */}
                    <Accordion className="shadow-md border-2 border-emerald-200 rounded-xl bg-gradient-to-r from-emerald-50 to-teal-50">
                      <AccordionSummary 
                        expandIcon={<ChevronDown className="w-5 h-5 text-emerald-600 transform transition-transform duration-200" />} 
                        className="px-4 py-3 hover:bg-emerald-100 transition-all duration-300"
                      >
                        <Typography variant="subtitle1" className="text-transparent bg-clip-text bg-gradient-to-r from-emerald-600 to-teal-600 font-bold text-lg flex items-center">
                          <Zap className="mr-3 w-6 h-6 text-emerald-500 drop-shadow-sm" />
                          工作流选择
                        </Typography>
                      </AccordionSummary>
                      <AccordionDetails className="px-4 pb-4">
                        <div className="space-y-4">
                          <div className="space-y-3">
                            {[
                              { 
                                id: '1', 
                                name: '订单处理流程', 
                                description: '自动化订单处理和状态更新，包括库存检查、支付验证和发货通知',
                                icon: '📦',
                                category: '电商流程',
                                status: 'running',
                                version: 'v2.1.0',
                                nodes: 12,
                                successRate: 98.5
                              },
                              { 
                                id: '2', 
                                name: '用户反馈分析', 
                                description: '收集和分析用户反馈数据，自动生成洞察报告和优先级建议',
                                icon: '📊',
                                category: '数据分析',
                                status: 'completed',
                                version: 'v1.8.5',
                                nodes: 8,
                                successRate: 100
                              },
                              { 
                                id: '3', 
                                name: '数据同步流程', 
                                description: '多系统数据同步和备份，确保数据一致性和完整性',
                                icon: '🔄',
                                category: '数据管理',
                                status: 'scheduled',
                                version: 'v3.2.1',
                                nodes: 15,
                                successRate: 95.2
                              }
                            ].map((workflow) => (
                              <div
                                key={workflow.id}
                                className={`p-4 rounded-xl border-2 transition-all duration-300 cursor-pointer ${
                                  agentConfig.workflows.includes(workflow.id)
                                    ? 'border-emerald-400 bg-gradient-to-r from-emerald-50 to-teal-50 shadow-lg scale-[1.02]'
                                    : 'border-gray-200 bg-white hover:border-emerald-300 hover:shadow-md hover:scale-[1.01]'
                                }`}
                                onClick={() => {
                                  const isSelected = agentConfig.workflows.includes(workflow.id)
                                  setAgentConfig(prev => ({
                                    ...prev,
                                    workflows: isSelected 
                                      ? prev.workflows.filter(w => w !== workflow.id)
                                      : [...prev.workflows, workflow.id]
                                  }))
                                }}
                              >
                                <div className="flex items-center justify-between">
                                  <div className="flex items-center space-x-4 flex-1">
                                    <div className={`w-12 h-12 rounded-lg flex items-center justify-center text-2xl ${
                                      agentConfig.workflows.includes(workflow.id)
                                        ? 'bg-emerald-100'
                                        : 'bg-gray-100'
                                    }`}>
                                      {workflow.icon}
                                    </div>
                                    <div className="flex-1">
                                      <div className="flex items-center space-x-3 mb-1">
                                        <h4 className={`font-semibold text-lg ${
                                          agentConfig.workflows.includes(workflow.id)
                                            ? 'text-emerald-800'
                                            : 'text-gray-800'
                                        }`}>
                                          {workflow.name}
                                        </h4>
                                        <span className="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-700 rounded-full">
                                          {workflow.category}
                                        </span>
                                        <span className="px-2 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded-full">
                                          {workflow.version}
                                        </span>
                                      </div>
                                      <p className="text-gray-600 text-sm leading-relaxed mb-2">
                                        {workflow.description}
                                      </p>
                                      <div className="flex items-center space-x-4 text-xs text-gray-500">
                                        <span>节点: {workflow.nodes}</span>
                                        <span>成功率: {workflow.successRate}%</span>
                                      </div>
                                    </div>
                                  </div>
                                  
                                  <div className="flex items-center space-x-2 ml-4">
                                    <IconButton
                                      size="small"
                                      className="p-2 bg-blue-100 hover:bg-blue-200 text-blue-600 rounded-lg transition-all duration-200"
                                      onClick={(e) => {
                                        e.stopPropagation()
                                        setSnackbar({ open: true, message: `${workflow.name} 工作流配置功能开发中...`, severity: 'info' })
                                      }}
                                      title="工作流配置"
                                    >
                                      <Settings className="w-4 h-4" />
                                    </IconButton>
                                    <IconButton
                                      size="small"
                                      className="p-2 bg-green-100 hover:bg-green-200 text-green-600 rounded-lg transition-all duration-200"
                                      onClick={(e) => {
                                        e.stopPropagation()
                                        setSnackbar({ open: true, message: `${workflow.name} 工作流已复制到剪贴板`, severity: 'success' })
                                      }}
                                      title="复制工作流"
                                    >
                                      <Copy className="w-4 h-4" />
                                    </IconButton>
                                    <IconButton
                                      size="small"
                                      className="p-2 bg-red-100 hover:bg-red-200 text-red-600 rounded-lg transition-all duration-200"
                                      onClick={(e) => {
                                        e.stopPropagation()
                                        setSnackbar({ open: true, message: `${workflow.name} 工作流删除功能开发中...`, severity: 'info' })
                                      }}
                                      title="删除工作流"
                                    >
                                      <Trash2 className="w-4 h-4" />
                                    </IconButton>
                                  </div>
                                </div>
                                
                                {agentConfig.workflows.includes(workflow.id) && (
                                  <div className="mt-3 pt-3 border-t border-emerald-200">
                                    <div className="flex items-center space-x-2">
                                      <div className="w-2 h-2 bg-emerald-500 rounded-full"></div>
                                      <span className="text-sm text-emerald-700 font-medium">已启用</span>
                                    </div>
                                  </div>
                                )}
                              </div>
                            ))}
                          </div>
                          
                          <div className="flex items-center justify-between pt-4 border-t border-gray-200">
                            <div className="flex items-center space-x-3">
                              <Button
                                variant="outlined"
                                size="small"
                                startIcon={<Plus className="w-4 h-4" />}
                                onClick={() => navigate('/dashboard/workflows/new')}
                                className="border-2 border-emerald-300 text-emerald-700 hover:border-emerald-400 hover:bg-emerald-50 hover:text-emerald-800 transition-all duration-300 font-medium px-4 py-2 rounded-lg"
                              >
                                添加新工作流
                              </Button>
                              <Button
                                variant="outlined"
                                size="small"
                                startIcon={<Download className="w-4 h-4" />}
                                onClick={() => setSnackbar({ open: true, message: '批量导入工作流功能开发中...', severity: 'info' })}
                                className="border-2 border-blue-300 text-blue-700 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-800 transition-all duration-300 font-medium px-4 py-2 rounded-lg"
                              >
                                批量导入
                              </Button>
                            </div>
                            <Typography variant="body2" className="text-gray-500 font-medium">
                              已选择 <span className="text-emerald-600 font-bold">{agentConfig.workflows.length}</span> 个工作流
                            </Typography>
                          </div>
                        </div>
                      </AccordionDetails>
                    </Accordion>
                  </div>
                </AccordionDetails>
              </Accordion>

              {/* Knowledge Panel */}
              <Accordion defaultExpanded className="shadow-lg border-2 border-gradient-to-r from-blue-100 to-indigo-100 rounded-2xl bg-gradient-to-br from-white to-blue-50">
                <AccordionSummary 
                  expandIcon={<ChevronDown className="w-6 h-6 text-blue-600 transform transition-transform duration-200" />} 
                  className="px-6 py-4 hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 transition-all duration-300"
                >
                  <Typography variant="h6" className="flex items-center text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-indigo-600 font-bold text-lg">
                    <BookOpen className="mr-3 w-6 h-6 text-blue-500 drop-shadow-sm" />
                    知识库配置
                  </Typography>
                </AccordionSummary>
                <AccordionDetails className="px-6 pb-6">
                  <div className="space-y-6">
                    <div>
                      <Typography variant="subtitle1" className="mb-4 text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-indigo-600 font-bold text-lg">
                        信息导入
                      </Typography>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div 
                          className="p-4 border-2 border-dashed border-blue-300 rounded-xl bg-gradient-to-r from-blue-50 to-indigo-50 hover:border-blue-400 hover:bg-gradient-to-r hover:from-blue-100 hover:to-indigo-100 transition-all duration-300 cursor-pointer text-center"
                          onClick={() => setSnackbar({ open: true, message: '文本信息导入功能开发中...', severity: 'info' })}
                        >
                          <div className="text-3xl mb-2">📝</div>
                          <Typography variant="subtitle2" className="text-blue-700 font-medium">文本信息</Typography>
                          <Typography variant="body2" className="text-blue-600 text-sm mt-1">导入文档、说明等文本内容</Typography>
                        </div>
                        
                        <div 
                          className="p-4 border-2 border-dashed border-blue-300 rounded-xl bg-gradient-to-r from-blue-50 to-indigo-50 hover:border-blue-400 hover:bg-gradient-to-r hover:from-blue-100 hover:to-indigo-100 transition-all duration-300 cursor-pointer text-center"
                          onClick={() => setSnackbar({ open: true, message: '表格数据导入功能开发中...', severity: 'info' })}
                        >
                          <div className="text-3xl mb-2">📊</div>
                          <Typography variant="subtitle2" className="text-blue-700 font-medium">表格数据</Typography>
                          <Typography variant="body2" className="text-blue-600 text-sm mt-1">导入Excel、CSV等表格数据</Typography>
                        </div>
                        
                        <div 
                          className="p-4 border-2 border-dashed border-blue-300 rounded-xl bg-gradient-to-r from-blue-50 to-indigo-50 hover:border-blue-400 hover:bg-gradient-to-r hover:from-blue-100 hover:to-indigo-100 transition-all duration-300 cursor-pointer text-center"
                          onClick={() => setSnackbar({ open: true, message: '图片信息导入功能开发中...', severity: 'info' })}
                        >
                          <div className="text-3xl mb-2">🖼️</div>
                          <Typography variant="subtitle2" className="text-blue-700 font-medium">图片信息</Typography>
                          <Typography variant="body2" className="text-blue-600 text-sm mt-1">导入图片、图表等视觉信息</Typography>
                        </div>
                      </div>
                    </div>

                    <div>
                      <Typography variant="subtitle1" className="mb-4 text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-indigo-600 font-bold text-lg">
                        已导入知识
                      </Typography>
                      <div className="flex flex-wrap gap-3">
                        {[
                          { id: 'product_manual', name: '产品手册', description: '详细的产品使用说明和功能介绍' },
                          { id: 'faq_database', name: '常见问题', description: '用户常见问题解答数据库' },
                          { id: 'company_policies', name: '公司政策', description: '企业规章制度和操作流程' }
                        ].map((knowledge) => (
                          <Chip
                            key={knowledge.id}
                            label={knowledge.name}
                            onClick={() => {
                              const isSelected = agentConfig.knowledge.includes(knowledge.id)
                              setAgentConfig(prev => ({
                                ...prev,
                                knowledge: isSelected 
                                  ? prev.knowledge.filter(k => k !== knowledge.id)
                                  : [...prev.knowledge, knowledge.id]
                              }))
                            }}
                            color={agentConfig.knowledge.includes(knowledge.id) ? 'primary' : 'default'}
                            variant={agentConfig.knowledge.includes(knowledge.id) ? 'filled' : 'outlined'}
                            className={`text-sm px-4 py-3 cursor-pointer transition-all duration-300 font-medium ${
                              agentConfig.knowledge.includes(knowledge.id)
                                ? 'bg-gradient-to-r from-blue-500 to-indigo-500 text-white shadow-lg scale-105'
                                : 'bg-white border-2 border-blue-200 text-blue-700 hover:border-blue-400 hover:shadow-md hover:scale-105'
                            }`}
                            title={knowledge.description}
                          />
                        ))}
                      </div>
                    </div>
                  </div>
                </AccordionDetails>
              </Accordion>

              {/* Memory Panel */}
              <Accordion defaultExpanded className="shadow-lg border-2 border-gradient-to-r from-purple-100 to-pink-100 rounded-2xl bg-gradient-to-br from-white to-purple-50">
                <AccordionSummary 
                  expandIcon={<ChevronDown className="w-6 h-6 text-purple-600 transform transition-transform duration-200" />} 
                  className="px-6 py-4 hover:bg-gradient-to-r hover:from-purple-50 hover:to-pink-50 transition-all duration-300"
                >
                  <Typography variant="h6" className="flex items-center text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-pink-600 font-bold text-lg">
                    <Brain className="mr-3 w-6 h-6 text-purple-500 drop-shadow-sm" />
                    记忆配置
                  </Typography>
                </AccordionSummary>
                <AccordionDetails className="px-6 pb-6">
                  <div className="space-y-6">
                    <div>
                      <Typography variant="subtitle1" className="mb-4 text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-pink-600 font-bold text-lg">
                        记忆存储
                      </Typography>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div 
                          className="p-4 border-2 border-dashed border-purple-300 rounded-xl bg-gradient-to-r from-purple-50 to-pink-50 hover:border-purple-400 hover:bg-gradient-to-r hover:from-purple-100 hover:to-pink-100 transition-all duration-300 cursor-pointer text-center"
                          onClick={() => setSnackbar({ open: true, message: '变量存储功能开发中...', severity: 'info' })}
                        >
                          <div className="text-3xl mb-2">🔧</div>
                          <Typography variant="subtitle2" className="text-purple-700 font-medium">变量存储</Typography>
                          <Typography variant="body2" className="text-purple-600 text-sm mt-1">存储和检索对话变量</Typography>
                        </div>
                        
                        <div 
                          className="p-4 border-2 border-dashed border-purple-300 rounded-xl bg-gradient-to-r from-purple-50 to-pink-50 hover:border-purple-400 hover:bg-gradient-to-r hover:from-purple-100 hover:to-pink-100 transition-all duration-300 cursor-pointer text-center"
                          onClick={() => setSnackbar({ open: true, message: '数据库存储功能开发中...', severity: 'info' })}
                        >
                          <div className="text-3xl mb-2">🗄️</div>
                          <Typography variant="subtitle2" className="text-purple-700 font-medium">数据库存储</Typography>
                          <Typography variant="body2" className="text-purple-600 text-sm mt-1">持久化存储重要信息</Typography>
                        </div>
                        
                        <div 
                          className="p-4 border-2 border-dashed border-purple-300 rounded-xl bg-gradient-to-r from-purple-50 to-pink-50 hover:border-purple-400 hover:bg-gradient-to-r hover:from-purple-100 hover:to-pink-100 transition-all duration-300 cursor-pointer text-center"
                          onClick={() => setSnackbar({ open: true, message: '长期记忆功能开发中...', severity: 'info' })}
                        >
                          <div className="text-3xl mb-2">🧠</div>
                          <Typography variant="subtitle2" className="text-purple-700 font-medium">长期记忆</Typography>
                          <Typography variant="body2" className="text-purple-600 text-sm mt-1">跨会话的记忆保持</Typography>
                        </div>
                        
                        <div 
                          className="p-4 border-2 border-dashed border-purple-300 rounded-xl bg-gradient-to-r from-purple-50 to-indigo-50 hover:border-purple-400 hover:bg-gradient-to-r hover:from-purple-100 hover:to-indigo-100 transition-all duration-300 cursor-pointer text-center"
                          onClick={() => setSnackbar({ open: true, message: '文件盒功能开发中...', severity: 'info' })}
                        >
                          <div className="text-3xl mb-2">📁</div>
                          <Typography variant="subtitle2" className="text-purple-700 font-medium">文件盒</Typography>
                          <Typography variant="body2" className="text-purple-600 text-sm mt-1">管理上传的文件和文档</Typography>
                        </div>
                      </div>
                    </div>
                  </div>
                </AccordionDetails>
              </Accordion>

              {/* Opening Remarks Panel */}
              <Accordion defaultExpanded className="shadow-lg border-2 border-gradient-to-r from-indigo-100 to-blue-100 rounded-2xl bg-gradient-to-br from-white to-indigo-50">
                <AccordionSummary
                  expandIcon={<ChevronDown className="w-6 h-6 text-indigo-600 transform transition-transform duration-200" />}
                  className="px-6 py-4 hover:bg-gradient-to-r hover:from-indigo-50 hover:to-blue-50 transition-all duration-300"
                >
                  <Typography variant="h6" className="flex items-center text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-blue-600 font-bold text-lg">
                    <MessageSquare className="mr-3 w-6 h-6 text-indigo-500 drop-shadow-sm" />
                    开场白设置
                  </Typography>
                </AccordionSummary>
                <AccordionDetails className="px-6 pb-6">
                  <div className="space-y-4">
                    <Typography variant="body2" className="text-indigo-600 text-sm">
                      这是用户开始对话时智能体的第一句话，支持富文本编辑
                    </Typography>

                    {/* Rich Text Toolbar */}
                    <div className="border-2 border-indigo-200 rounded-lg bg-white p-3">
                      <div className="flex flex-wrap items-center gap-2 mb-3 pb-3 border-b border-indigo-100">
                        {/* Font Controls */}
                        <div className="flex items-center space-x-2">
                          <select
                            className="px-2 py-1 border border-indigo-200 rounded text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                            onClick={() => setSnackbar({ open: true, message: '字体选择功能开发中...', severity: 'info' })}
                          >
                            <option>默认字体</option>
                            <option>Arial</option>
                            <option>Times New Roman</option>
                            <option>微软雅黑</option>
                          </select>

                          <select
                            className="px-2 py-1 border border-indigo-200 rounded text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                            onClick={() => setSnackbar({ open: true, message: '字号选择功能开发中...', severity: 'info' })}
                          >
                            <option>14px</option>
                            <option>12px</option>
                            <option>16px</option>
                            <option>18px</option>
                            <option>20px</option>
                          </select>
                        </div>

                        {/* Text Formatting */}
                        <div className="flex items-center space-x-1">
                          <button
                            className="p-2 hover:bg-indigo-100 rounded transition-colors duration-200"
                            onClick={() => setSnackbar({ open: true, message: '粗体功能开发中...', severity: 'info' })}
                            title="粗体"
                          >
                            <strong className="text-indigo-700">B</strong>
                          </button>
                          <button
                            className="p-2 hover:bg-indigo-100 rounded transition-colors duration-200"
                            onClick={() => setSnackbar({ open: true, message: '斜体功能开发中...', severity: 'info' })}
                            title="斜体"
                          >
                            <em className="text-indigo-700">I</em>
                          </button>
                          <button
                            className="p-2 hover:bg-indigo-100 rounded transition-colors duration-200"
                            onClick={() => setSnackbar({ open: true, message: '下划线功能开发中...', severity: 'info' })}
                            title="下划线"
                          >
                            <u className="text-indigo-700">U</u>
                          </button>
                        </div>

                        {/* Text Alignment */}
                        <div className="flex items-center space-x-1">
                          <button
                            className="p-2 hover:bg-indigo-100 rounded transition-colors duration-200"
                            onClick={() => setSnackbar({ open: true, message: '左对齐功能开发中...', severity: 'info' })}
                            title="左对齐"
                          >
                            <div className="w-4 h-4 flex items-center justify-start">
                              <div className="w-3 h-0.5 bg-indigo-700"></div>
                            </div>
                          </button>
                          <button
                            className="p-2 hover:bg-indigo-100 rounded transition-colors duration-200"
                            onClick={() => setSnackbar({ open: true, message: '居中对齐功能开发中...', severity: 'info' })}
                            title="居中对齐"
                          >
                            <div className="w-4 h-4 flex items-center justify-center">
                              <div className="w-3 h-0.5 bg-indigo-700"></div>
                            </div>
                          </button>
                          <button
                            className="p-2 hover:bg-indigo-100 rounded transition-colors duration-200"
                            onClick={() => setSnackbar({ open: true, message: '右对齐功能开发中...', severity: 'info' })}
                            title="右对齐"
                          >
                            <div className="w-4 h-4 flex items-center justify-end">
                              <div className="w-3 h-0.5 bg-indigo-700"></div>
                            </div>
                          </button>
                        </div>

                        {/* Insert Options */}
                        <div className="flex items-center space-x-1">
                          <button
                            className="p-2 hover:bg-indigo-100 rounded transition-colors duration-200"
                            onClick={() => setSnackbar({ open: true, message: '插入链接功能开发中...', severity: 'info' })}
                            title="插入链接"
                          >
                            🔗
                          </button>
                          <button
                            className="p-2 hover:bg-indigo-100 rounded transition-colors duration-200"
                            onClick={() => setSnackbar({ open: true, message: '插入图片功能开发中...', severity: 'info' })}
                            title="插入图片"
                          >
                            🖼️
                          </button>
                          <button
                            className="p-2 hover:bg-indigo-100 rounded transition-colors duration-200"
                            onClick={() => setSnackbar({ open: true, message: '插入表情功能开发中...', severity: 'info' })}
                            title="插入表情"
                          >
                            😊
                          </button>
                        </div>
                      </div>

                      {/* Rich Text Editor */}
                      <div className="relative">
                        <textarea
                          value={agentConfig.openingRemarks}
                          onChange={(e) => setAgentConfig(prev => ({ ...prev, openingRemarks: e.target.value }))}
                          placeholder="设置智能体的开场白，让用户了解如何开始对话..."
                          className="w-full min-h-[120px] p-3 border border-indigo-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-y"
                          style={{ resize: 'vertical' }}
                        />
                        <div className="absolute bottom-2 right-2 text-xs text-indigo-400">
                          {agentConfig.openingRemarks.length} 字符
                        </div>
                      </div>
                    </div>
                  </div>
                </AccordionDetails>
              </Accordion>
            </div>
          </TabPanel>

          {/* Preview and Debug Tab */}
          <TabPanel value={activeTab} index={2}>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Left Panel - Chatbot Dialog */}
              <div className="flex flex-col">
                <Paper elevation={0} className="p-6 border border-gray-200 rounded-xl flex flex-col bg-gradient-to-br from-blue-50 to-indigo-50" style={{ height: '600px' }}>
                  <div className="flex items-center justify-between mb-4">
                    <Typography variant="h6" className="text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-indigo-600 font-bold text-lg">
                      智能体调试对话
                    </Typography>
                    <div className="flex items-center space-x-2">
                      {agentConfig.debugStats.isRunning && (
                        <>
                          <div className="w-3 h-3 rounded-full bg-green-500 animate-pulse"></div>
                          <span className="text-sm text-gray-600">运行中</span>
                        </>
                      )}
                    </div>
                  </div>
                  
                  {/* Chat Messages Area */}
                  <div className="flex-1 bg-white rounded-xl p-4 mb-4 overflow-y-auto shadow-inner border border-gray-100">
                    {agentConfig.testHistory.length === 0 ? (
                      <div className="text-center py-8">
                        <div className="w-16 h-16 bg-gradient-to-br from-blue-100 to-indigo-100 rounded-full flex items-center justify-center mx-auto mb-3">
                          <MessageSquare className="w-8 h-8 text-blue-500" />
                        </div>
                        <p className="text-gray-500 text-base font-medium">开始对话以调试智能体</p>
                        <p className="text-gray-400 text-sm mt-1">输入消息开始测试您的智能体配置</p>
                      </div>
                    ) : (
                      <div className="space-y-4">
                        {agentConfig.testHistory.map((msg, index) => (
                          <div
                            key={index}
                            className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
                          >
                            <div className={`max-w-[85%] ${msg.role === 'user' ? 'order-2' : 'order-1'}`}>
                              {msg.role === 'assistant' && (
                                <div className="flex items-center space-x-2 mb-2">
                                  <div className="w-6 h-6 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full flex items-center justify-center">
                                    <span className="text-white text-xs font-bold">AI</span>
                                  </div>
                                  <span className="text-sm text-gray-600 font-medium">旅行规划助手</span>
                                  <span className="text-xs text-gray-400">
                                    {msg.timestamp.toLocaleTimeString()}
                                  </span>
                                </div>
                              )}
                              
                              <div
                                className={`p-3 rounded-xl shadow-sm ${
                                  msg.role === 'user' 
                                    ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white' 
                                    : 'bg-white border border-gray-200 text-gray-800'
                                }`}
                              >
                                <div className="text-sm leading-relaxed whitespace-pre-wrap">{msg.content}</div>
                              </div>
                              
                              {msg.role === 'user' && (
                                <div className="flex items-center justify-end space-x-2 mt-2">
                                  <span className="text-xs text-gray-400">
                                    {msg.timestamp.toLocaleTimeString()}
                                  </span>
                                  <div className="w-5 h-5 bg-gradient-to-br from-blue-400 to-indigo-500 rounded-full flex items-center justify-center">
                                    <span className="text-white text-xs font-bold">我</span>
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                  
                  {/* Input Area */}
                  <div className="bg-white rounded-xl p-3 border border-gray-200 shadow-sm">
                    <div className="flex items-center space-x-3">
                      <TextField
                        fullWidth
                        value={testMessage}
                        onChange={(e) => setTestMessage(e.target.value)}
                        placeholder="输入消息来测试智能体..."
                        onKeyPress={(e) => e.key === 'Enter' && handleTest()}
                        size="small"
                        className="flex-1"
                        sx={{
                          '& .MuiOutlinedInput-root': {
                            borderRadius: '12px',
                            '&:hover fieldset': {
                              borderColor: '#3B82F6',
                            },
                          },
                        }}
                      />
                      <Button
                        variant="contained"
                        startIcon={<Play className="w-4 h-4" />}
                        onClick={handleTest}
                        disabled={isTesting || !testMessage.trim()}
                        className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 shadow-lg px-4 rounded-xl"
                        size="small"
                        sx={{
                          borderRadius: '12px',
                          textTransform: 'none',
                          fontWeight: 600,
                        }}
                      >
                        {isTesting ? (
                          <div className="flex items-center space-x-2">
                            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                            <span>发送中...</span>
                          </div>
                        ) : (
                          '发送'
                        )}
                      </Button>
                    </div>
                  </div>
                </Paper>
              </div>

              {/* Right Panel - Debug Information Tree */}
              <div className="flex flex-col">
                <Paper elevation={0} className="p-6 border border-gray-200 rounded-xl flex flex-col bg-gradient-to-br from-green-50 to-emerald-50" style={{ height: '600px' }}>
                  <Typography variant="h6" className="mb-4 text-transparent bg-clip-text bg-gradient-to-r from-green-600 to-emerald-600 font-bold text-lg">
                    调试信息
                  </Typography>
                  
                  <div className="flex-1 bg-white rounded-xl p-4 overflow-y-auto shadow-inner border border-gray-100">
                    <div className="space-y-4">
                      {/* Real-time Running Status */}
                      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-200 p-4">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center space-x-2">
                            <div className={`w-3 h-3 rounded-full ${agentConfig.debugStats.isRunning ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`}></div>
                            <span className="font-semibold text-gray-800">实时运行状态</span>
                          </div>
                          <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                            agentConfig.debugStats.isRunning 
                              ? 'bg-green-100 text-green-700' 
                              : 'bg-gray-100 text-gray-600'
                          }`}>
                            {agentConfig.debugStats.isRunning ? '运行中' : ''}
                          </span>
                        </div>
                        <div className="grid grid-cols-2 gap-3 text-sm">
                          <div className="flex justify-between">
                            <span className="text-gray-600">响应时间:</span>
                            <span className="font-medium text-blue-600">{agentConfig.debugStats.responseTime}s</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">活跃插件:</span>
                            <span className="font-medium text-green-600">{agentConfig.debugStats.activePlugins}</span>
                          </div>
                        </div>
                      </div>

                      {/* Token Consumption */}
                      <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-200 p-4">
                        <div className="flex items-center space-x-2 mb-3">
                          <div className="w-3 h-3 bg-purple-500 rounded-full"></div>
                          <span className="font-semibold text-gray-800">Token 消耗</span>
                        </div>
                        <div className="space-y-3">
                          <div className="flex justify-between items-center">
                            <span className="text-gray-600 text-sm">已使用:</span>
                            <span className="font-bold text-purple-600 text-lg">{agentConfig.debugStats.tokensUsed.toLocaleString()}</span>
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div 
                              className="bg-gradient-to-r from-purple-500 to-pink-500 h-2 rounded-full transition-all duration-300"
                              style={{ width: `${Math.min((agentConfig.debugStats.tokensUsed / 4000) * 100, 100)}%` }}
                            ></div>
                          </div>
                          <div className="flex justify-between text-xs text-gray-500">
                            <span>0</span>
                            <span>4,000</span>
                          </div>
                        </div>
                      </div>

                      {/* Memory Usage */}
                      <div className="bg-gradient-to-r from-orange-50 to-red-50 rounded-xl border border-orange-200 p-4">
                        <div className="flex items-center space-x-2 mb-3">
                          <div className="w-3 h-3 bg-orange-500 rounded-full"></div>
                          <span className="font-semibold text-gray-800">内存使用</span>
                        </div>
                        <div className="space-y-3">
                          <div className="flex justify-between items-center">
                            <span className="text-gray-600 text-sm">使用率:</span>
                            <span className="font-bold text-orange-600 text-lg">{agentConfig.debugStats.memoryUsage}%</span>
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div 
                              className="bg-gradient-to-r from-orange-500 to-red-500 h-2 rounded-full transition-all duration-300"
                              style={{ width: `${agentConfig.debugStats.memoryUsage}%` }}
                            ></div>
                          </div>
                          <div className="flex justify-between text-xs text-gray-500">
                            <span>0%</span>
                            <span>100%</span>
                          </div>
                        </div>
                      </div>

                      {/* Conversation Stats Tree */}
                      <div className="bg-white rounded-lg border border-gray-200 p-3">
                        <div className="flex items-center space-x-2 mb-2">
                          <ChevronDown className="w-4 h-4 text-gray-600" />
                          <span className="font-semibold text-gray-800">对话统计</span>
                        </div>
                        <div className="ml-6 space-y-2 text-sm">
                          <div className="flex justify-between">
                            <span className="text-gray-600">总对话数:</span>
                            <span className="font-medium">{Math.floor(agentConfig.testHistory.length / 2)}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">用户消息:</span>
                            <span className="font-medium">{agentConfig.testHistory.filter(msg => msg.role === 'user').length}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">智能体回复:</span>
                            <span className="font-medium">{agentConfig.testHistory.filter(msg => msg.role === 'assistant').length}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </Paper>
              </div>
            </div>
          </TabPanel>
        </Card>
      </div>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert 
          onClose={() => setSnackbar({ ...snackbar, open: false })} 
          severity={snackbar.severity}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </div>
  )
}

export default AgentEditorEnhancedPage