import React, { useState, useEffect } from 'react'
import { useNavigate, useLocation, useParams } from 'react-router-dom'
import { 
  ArrowLeft, 
  Save, 
  Play, 
  TestTube,
  Copy,
  Download,
  Upload,
  Trash2,
  Brain,
  Settings,
  Eye,
  Sparkles,
  Zap,
  BookOpen,
  MessageSquare,
  Plug
} from 'lucide-react'
import { 
  TextField, 
  Button, 
  Select, 
  MenuItem, 
  FormControl, 
  InputLabel, 
  Switch, 
  FormControlLabel,
  Chip,
  Tabs,
  Tab,
  Box,
  Typography,
  Card,
  Alert,
  Snackbar,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Divider,
  Paper
} from '@mui/material'

interface TabPanelProps {
  children?: React.ReactNode
  index: number
  value: number
}

interface AgentEntryData {
  editMode: 'manual' | 'ai'
  name: string
  description: string
  icon: string
}

interface AgentConfig {
  name: string
  description: string
  icon: string
  editMode: 'manual' | 'ai'
  
  // System Prompt Configuration
  systemPrompt: string
  autoGeneratedPrompt: string
  promptTuning: {
    inputMode: 'upload' | 'manual'
    examples: string
    useCases: Array<{
      id: number
      name: string
      data: any
      uploadTime: Date
    }>
    optimizationModel: string
    evaluationModel: string
    optimizationRounds: number
  }
  
  // Orchestration Configuration
  model: string
  modelParams: {
    temperature: number
    maxTokens: number
    topP: number
    frequencyPenalty: number
    presencePenalty: number
  }
  plugins: string[]
  workflows: string[]
  triggers: string[]
  knowledge: string[]
  memory: {
    enabled: boolean
    type: 'conversation' | 'semantic' | 'hybrid'
    maxTokens: number
  }
  openingRemarks: string
  
  // Preview and Debug
  testHistory: Array<{ role: 'user' | 'assistant', content: string, timestamp: Date }>
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`agent-tabpanel-${index}`}
      aria-labelledby={`agent-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 4 }}>
          {children}
        </Box>
      )}
    </div>
  )
}

const AgentEditorEnhancedPage: React.FC = () => {
  const navigate = useNavigate()
  const location = useLocation()
  const { id } = useParams()
  
  const [activeTab, setActiveTab] = useState(0)
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' })
  
  // Get entry data from navigation state (for new agents) or determine if editing existing agent
  const entryData = location.state?.agentEntryData as AgentEntryData | undefined
  const isNew = !id || id === 'new'
  const isEditing = !isNew

  // Agent configuration state
  const [agentConfig, setAgentConfig] = useState<AgentConfig>({
    name: entryData?.name || '智能客服助手',
    description: entryData?.description || '专业的客户服务智能体，能够处理常见问题和投诉',
    icon: entryData?.icon || '🤖',
    editMode: entryData?.editMode || 'manual',
    
    // System Prompt Configuration
    systemPrompt: entryData?.editMode === 'ai' ? 
      `你是一个专业的${entryData?.name || '智能助手'}，${entryData?.description || ''}。请始终保持友好、专业的态度，提供准确、有用的帮助。` :
      '你是一个专业的客户服务代表，请用友好、专业的态度回答客户问题。',
    autoGeneratedPrompt: '',
    promptTuning: {
      inputMode: 'manual',
      examples: '用户：你好\n助手：您好！我是您的智能助手，有什么可以帮助您的吗？',
      useCases: [
        {
          id: 1,
          name: 'customer_service_examples.json',
          data: [
            { user: '你好', assistant: '您好！我是客服助手，有什么可以帮助您的吗？' },
            { user: '我想退货', assistant: '好的，请告诉我您的订单号和退货原因，我来帮您处理。' }
          ],
          uploadTime: new Date('2024-01-15T10:30:00'),
          status: 'active',
          examples: 2
        },
        {
          id: 2,
          name: 'technical_support.csv',
          data: [
            { user: '系统无法登录', assistant: '请检查网络连接和账号密码是否正确。' },
            { user: '页面显示错误', assistant: '请尝试刷新页面或清除浏览器缓存。' }
          ],
          uploadTime: new Date('2024-01-14T14:20:00'),
          status: 'active',
          examples: 2
        },
        {
          id: 3,
          name: 'product_qa.txt',
          data: '用户：这个产品怎么用？\n助手：请参考产品说明书，如有疑问可联系客服。',
          uploadTime: new Date('2024-01-13T09:15:00'),
          status: 'active',
          examples: 1
        }
      ],
      optimizationModel: 'gpt-4',
      evaluationModel: 'gpt-4',
      optimizationRounds: 3
    },
    
    // Orchestration Configuration
    model: 'gpt-4',
    modelParams: {
      temperature: 0.7,
      maxTokens: 2000,
      topP: 0.9,
      frequencyPenalty: 0.0,
      presencePenalty: 0.0
    },
    plugins: ['web_search', 'calculator', 'file_reader'],
    workflows: ['customer_service', 'troubleshooting'],
    triggers: ['greeting', 'question', 'complaint'],
    knowledge: ['product_manual', 'faq_database', 'company_policies'],
    memory: {
      enabled: true,
      type: 'conversation',
      maxTokens: 1000
    },
    openingRemarks: '您好！我是您的智能助手，很高兴为您服务。请问有什么可以帮助您的吗？',
    
    // Preview and Debug
    testHistory: []
  })

  // Test chat state
  const [testMessage, setTestMessage] = useState('')
  const [isTesting, setIsTesting] = useState(false)

  useEffect(() => {
    if (entryData?.editMode === 'ai') {
      // Auto-generate system prompt for AI mode
      const generatedPrompt = `你是一个专业的${entryData.name}，${entryData.description}。

角色定义：
- 主要职责：${entryData.description}
- 行为准则：始终保持友好、专业、准确
- 响应风格：清晰、有用、及时

能力范围：
- 问题解答：能够理解并回答用户的各种问题
- 任务协助：帮助用户完成相关任务
- 信息查询：提供准确的信息和建议

示例对话：
用户：你好
助手：您好！我是您的智能助手，有什么可以帮助您的吗？

请根据以上配置，为用户提供最好的服务体验。`

      setAgentConfig(prev => ({
        ...prev,
        autoGeneratedPrompt: generatedPrompt,
        systemPrompt: generatedPrompt
      }))
    }
  }, [entryData])

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue)
  }

  const handleSave = () => {
    // Simulate saving
    setSnackbar({ open: true, message: '智能体配置保存成功！', severity: 'success' })
  }

  const handleTest = async () => {
    if (!testMessage.trim()) return
    
    setIsTesting(true)
    const userMessage = { 
      role: 'user' as const, 
      content: testMessage,
      timestamp: new Date()
    }
    
    setAgentConfig(prev => ({
      ...prev,
      testHistory: [...prev.testHistory, userMessage]
    }))
    
    // Simulate AI response
    setTimeout(() => {
      const aiResponse = { 
        role: 'assistant' as const, 
        content: `这是对"${testMessage}"的模拟回复。在实际环境中，这里会调用配置的LLM API并根据系统提示词生成响应。`,
        timestamp: new Date()
      }
      
      setAgentConfig(prev => ({
        ...prev,
        testHistory: [...prev.testHistory, aiResponse]
      }))
      setIsTesting(false)
    }, 1000)
    
    setTestMessage('')
  }



  const handleExport = () => {
    const dataStr = JSON.stringify(agentConfig, null, 2)
    const dataBlob = new Blob([dataStr], { type: 'application/json' })
    const url = URL.createObjectURL(dataBlob)
    const link = document.createElement('a')
    link.href = url
    link.download = `${agentConfig.name || 'agent'}.json`
    link.click()
    URL.revokeObjectURL(url)
  }

  const handleImport = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onload = (e) => {
        try {
          const importedConfig = JSON.parse(e.target?.result as string)
          setAgentConfig(importedConfig)
          setSnackbar({ open: true, message: '智能体配置导入成功', severity: 'success' })
        } catch (error) {
          setSnackbar({ open: true, message: '导入失败：文件格式错误', severity: 'error' })
        }
      }
      reader.readAsText(file)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-blue-50">
      <div className="max-w-7xl mx-auto px-6 py-8">
        {/* Page header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-6">
              <Button
                variant="outlined"
                startIcon={<ArrowLeft />}
                onClick={() => navigate('/dashboard/agents')}
                className="border-gray-300 text-gray-600 hover:border-gray-400 hover:bg-gray-50"
              >
                返回
              </Button>
              <div className="flex items-center space-x-4">
                <span className="text-4xl">{agentConfig.icon}</span>
                                <div>
                  <h1 className="text-3xl font-bold text-gray-900">
                    {isNew ? '创建智能体' : '编辑智能体'}
                  </h1>
                  <p className="text-lg text-gray-600">
                    {isNew ? '配置智能体的系统提示词、编排参数和调试信息' : '修改智能体配置和参数'}
                  </p>
                  <p className="text-sm text-gray-500 mt-1">
                    {agentConfig.description}
                  </p>
                </div>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <Button
                variant="outlined"
                startIcon={<TestTube />}
                onClick={() => setActiveTab(2)}
                className="border-blue-300 text-blue-600 hover:border-blue-400 hover:bg-blue-50"
              >
                测试调试
              </Button>
              <Button
                variant="contained"
                startIcon={<Save />}
                onClick={handleSave}
                className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 shadow-lg"
              >
                保存配置
              </Button>
            </div>
          </div>
        </div>

        {/* Main content */}
        <Card className="shadow-xl border-0 overflow-hidden">
          <Box sx={{ borderBottom: 1, borderColor: 'divider', backgroundColor: 'white' }}>
            <Tabs 
              value={activeTab} 
              onChange={handleTabChange} 
              aria-label="智能体配置标签页"
              className="px-6"
              sx={{
                '& .MuiTab-root': {
                  minHeight: '64px',
                  fontSize: '1rem',
                  fontWeight: 500,
                  textTransform: 'none',
                  color: '#6B7280',
                  '&.Mui-selected': {
                    color: '#3B82F6',
                    fontWeight: 600,
                  },
                },
                '& .MuiTabs-indicator': {
                  height: '3px',
                  borderRadius: '2px',
                  backgroundColor: '#3B82F6',
                },
              }}
            >
              <Tab 
                label={
                  <div className="flex items-center space-x-3">
                    <Brain className="w-5 h-5" />
                    <span>系统提示词配置</span>
                  </div>
                } 
              />
              <Tab 
                label={
                  <div className="flex items-center space-x-3">
                    <Settings className="w-5 h-5" />
                    <span>编排配置</span>
                  </div>
                } 
              />
              <Tab 
                label={
                  <div className="flex items-center space-x-3">
                    <Eye className="w-5 h-5" />
                    <span>预览调试</span>
                  </div>
                } 
              />
            </Tabs>
          </Box>

          {/* System Prompt Configuration Tab */}
          <TabPanel value={activeTab} index={0}>
            <div className="space-y-8">
              <div className="flex items-center justify-between">
                <Typography variant="h6" className="text-gray-800 font-semibold">
                  系统提示词开发
                </Typography>
              </div>
              
                              <Paper elevation={0} className="p-6 border border-gray-200 rounded-xl">
                  <Typography variant="subtitle1" className="mb-4 text-gray-700 font-medium">
                    系统提示词
                  </Typography>
                  <TextField
                    fullWidth
                    multiline
                    rows={8}
                    value={agentConfig.systemPrompt}
                    onChange={(e) => setAgentConfig(prev => ({ ...prev, systemPrompt: e.target.value }))}
                    placeholder="定义智能体的角色、能力和行为准则..."
                    className="mt-2"
                  />
                  <div className="mt-6">
                    <Button
                      variant="contained"
                      startIcon={<Sparkles />}
                      onClick={() => {
                        // Auto-generate prompt based on current configuration
                        const generatedPrompt = `你是一个专业的智能助手，${agentConfig.description}。

角色定义：
- 主要职责：智能助手
- 行为准则：友好、专业、准确
- 响应风格：清晰、有用、及时

能力范围：
- 问题解答：能够理解并回答用户的各种问题
- 任务协助：帮助用户完成相关任务
- 信息查询：提供准确的信息和建议

示例对话：
${agentConfig.promptTuning.examples || '用户：你好\n助手：您好！我是您的智能助手，有什么可以帮助您的吗？'}

请根据以上配置，为用户提供最好的服务体验。`

                        setAgentConfig(prev => ({
                          ...prev,
                          systemPrompt: generatedPrompt,
                          autoGeneratedPrompt: generatedPrompt
                        }))
                        setSnackbar({ open: true, message: '系统提示词自动生成成功！', severity: 'success' })
                      }}
                      className="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700"
                    >
                      自动生成提示词
                    </Button>
                  </div>
                </Paper>

              {agentConfig.editMode === 'ai' && (
                <Alert severity="info" icon={<Sparkles className="w-6 h-6" />} className="border border-blue-200 bg-blue-50">
                  <Typography variant="body1" className="text-blue-800">
                    <strong>提示词自动生成：</strong>
                    系统已根据您的描述自动生成了系统提示词，您可以根据需要进行调整和优化。
                  </Typography>
                </Alert>
              )}

              <Divider className="my-8" />

              {/* Prompt Tuning Section */}
              <div>
                <div className="mb-6">
                  <Typography variant="h6" className="text-gray-800 font-semibold">
                    提示词调优
                  </Typography>
                </div>
                
                {/* Dataset Configuration */}
                <Paper elevation={0} className="p-6 border border-gray-200 rounded-xl mb-6">
                  <Typography variant="subtitle1" className="mb-4 text-gray-700 font-medium">
                    数据集配置
                  </Typography>
                  
                  {/* Toggle between Upload and Manual Input */}
                  <div className="mb-6">
                    <div className="flex items-center space-x-4 mb-4">
                      <FormControlLabel
                        control={
                          <Switch
                            checked={agentConfig.promptTuning.inputMode === 'upload'}
                            onChange={(e) => setAgentConfig(prev => ({
                              ...prev,
                              promptTuning: {
                                ...prev.promptTuning,
                                inputMode: e.target.checked ? 'upload' : 'manual'
                              }
                            }))}
                            color="primary"
                          />
                        }
                        label={
                          <Typography variant="subtitle2" className="text-gray-700 font-medium">
                            使用文件上传
                          </Typography>
                        }
                      />
                      <Typography variant="body2" className="text-gray-500">
                        {agentConfig.promptTuning.inputMode === 'upload' ? '文件上传模式' : '手动输入模式'}
                      </Typography>
                    </div>
                  </div>

                  {/* File Upload Mode */}
                  {agentConfig.promptTuning.inputMode === 'upload' && (
                    <div>
                      {/* Upload Header Row */}
                      <div className="flex items-center justify-between mb-4 p-4 bg-gray-50 rounded-lg border border-gray-200">
                        <div className="flex items-center space-x-3">
                          <Typography variant="subtitle1" className="text-gray-800 font-medium">
                            导入用例集
                          </Typography>
                          <Typography variant="body2" className="text-gray-500">
                            支持 JSON、CSV、TXT 格式文件
                          </Typography>
                        </div>
                        <div className="flex items-center space-x-3">
                          <input
                            type="file"
                            accept=".json,.csv,.txt"
                            onChange={(e) => {
                              const file = e.target.files?.[0]
                              if (file) {
                                const reader = new FileReader()
                                reader.onload = (event) => {
                                  try {
                                    const content = event.target?.result as string
                                    // Parse content based on file type
                                    let parsedData
                                    if (file.name.endsWith('.json')) {
                                      parsedData = JSON.parse(content)
                                    } else if (file.name.endsWith('.csv')) {
                                      // Simple CSV parsing
                                      const lines = content.split('\n')
                                      const headers = lines[0].split(',')
                                      parsedData = lines.slice(1).map(line => {
                                        const values = line.split(',')
                                        return headers.reduce((obj, header, index) => {
                                          obj[header.trim()] = values[index]?.trim() || ''
                                          return obj
                                        }, {} as any)
                                      })
                                    } else {
                                      // Text file - treat as plain text
                                      parsedData = content
                                    }
                                    
                                    setAgentConfig(prev => ({
                                      ...prev,
                                      promptTuning: {
                                        ...prev.promptTuning,
                                        useCases: [...(prev.promptTuning.useCases || []), {
                                          id: Date.now(),
                                          name: file.name,
                                          data: parsedData,
                                          uploadTime: new Date(),
                                          status: 'active',
                                          examples: parsedData.length || 1
                                        }]
                                      }
                                    }))
                                    setSnackbar({ open: true, message: '用例集上传成功！', severity: 'success' })
                                  } catch (error) {
                                    setSnackbar({ open: true, message: '文件解析失败，请检查文件格式', severity: 'error' })
                                  }
                                }
                                reader.readAsText(file)
                              }
                            }}
                            className="hidden"
                            id="use-case-upload"
                          />
                          <label htmlFor="use-case-upload">
                            <IconButton
                              component="span"
                              className="p-2 bg-blue-100 hover:bg-blue-200 text-blue-600 rounded-full transition-all duration-200"
                            >
                              <Upload className="w-5 h-5" />
                            </IconButton>
                          </label>
                          <IconButton
                            className="p-2 bg-red-100 hover:bg-red-200 text-red-600 rounded-full transition-all duration-200"
                            onClick={() => {
                              setAgentConfig(prev => ({
                                ...prev,
                                promptTuning: {
                                  ...prev.promptTuning,
                                  useCases: []
                                }
                              }))
                              setSnackbar({ open: true, message: '所有用例集已清空', severity: 'success' })
                            }}
                          >
                            <Trash2 className="w-5 h-5" />
                          </IconButton>
                        </div>
                      </div>

                      {/* Use Cases Table */}
                      <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                        <table className="min-w-full divide-y divide-gray-200">
                          <thead className="bg-gray-50">
                            <tr>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                用例集名称
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                文件类型
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                示例数量
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                上传时间
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                状态
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                操作
                              </th>
                            </tr>
                          </thead>
                          <tbody className="bg-white divide-y divide-gray-200">
                            {agentConfig.promptTuning.useCases && agentConfig.promptTuning.useCases.length > 0 ? (
                              agentConfig.promptTuning.useCases.map((useCase) => (
                                <tr key={useCase.id} className="hover:bg-gray-50">
                                  <td className="px-6 py-4 whitespace-nowrap">
                                    <div className="flex items-center">
                                      <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                                        <span className="text-blue-600 text-sm font-medium">
                                          {useCase.name.split('.').pop()?.toUpperCase()}
                                        </span>
                                      </div>
                                      <div className="text-sm font-medium text-gray-900">
                                        {useCase.name}
                                      </div>
                                    </div>
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap">
                                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                      {useCase.name.split('.').pop()?.toUpperCase()}
                                    </span>
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {useCase.examples || 1}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    {useCase.uploadTime.toLocaleString()}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap">
                                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                      {useCase.status === 'active' ? '活跃' : '已停用'}
                                    </span>
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <div className="flex items-center space-x-2">
                                      <IconButton
                                        size="small"
                                        className="p-1 bg-blue-100 hover:bg-blue-200 text-blue-600 rounded"
                                        onClick={() => {
                                          // Mock edit functionality
                                          setSnackbar({ open: true, message: '编辑功能开发中...', severity: 'info' })
                                        }}
                                      >
                                        <Edit3 className="w-4 h-4" />
                                      </IconButton>
                                      <IconButton
                                        size="small"
                                        className="p-1 bg-red-100 hover:bg-red-200 text-red-600 rounded"
                                        onClick={() => {
                                          setAgentConfig(prev => ({
                                            ...prev,
                                            promptTuning: {
                                              ...prev.promptTuning,
                                              useCases: prev.promptTuning.useCases?.filter(uc => uc.id !== useCase.id) || []
                                            }
                                          }))
                                          setSnackbar({ open: true, message: '用例集已删除', severity: 'success' })
                                        }}
                                      >
                                        <Trash2 className="w-4 h-4" />
                                      </IconButton>
                                    </div>
                                  </td>
                                </tr>
                              ))
                            ) : (
                              <tr>
                                <td colSpan={6} className="px-6 py-12 text-center">
                                  <div className="flex flex-col items-center space-y-3">
                                    <div className="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center">
                                      <Upload className="w-6 h-6 text-gray-400" />
                                    </div>
                                    <div>
                                      <Typography variant="body1" className="text-gray-500 font-medium">
                                        暂无用例集
                                      </Typography>
                                      <Typography variant="body2" className="text-gray-400">
                                        点击上方上传图标添加用例集
                                      </Typography>
                                    </div>
                                  </div>
                                </td>
                              </tr>
                            )}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  )}

                  {/* Manual Input Mode */}
                  {agentConfig.promptTuning.inputMode === 'manual' && (
                    <div>
                      <Typography variant="subtitle2" className="mb-3 text-gray-700 font-medium">
                        手动输入示例对话
                      </Typography>
                      <TextField
                        fullWidth
                        multiline
                        rows={6}
                        value={agentConfig.promptTuning.examples}
                        onChange={(e) => setAgentConfig(prev => ({
                          ...prev,
                          promptTuning: { ...prev.promptTuning, examples: e.target.value }
                        }))}
                        placeholder="提供一些示例对话来指导智能体的响应模式..."
                        className="mt-2"
                      />
                      <Typography variant="body2" className="text-gray-500 mt-2">
                        请输入用户和助手的对话示例，每行一个对话轮次
                      </Typography>
                    </div>
                  )}
                </Paper>

                {/* Optimization Strategy */}
                <Paper elevation={0} className="p-6 border border-gray-200 rounded-xl">
                  <Typography variant="subtitle1" className="mb-4 text-gray-700 font-medium">
                    优化策略
                  </Typography>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <FormControl fullWidth>
                      <Typography variant="subtitle2" className="mb-3 text-gray-700 font-medium">
                        优化模型
                      </Typography>
                      <Select
                        value={agentConfig.promptTuning.optimizationModel || 'gpt-4'}
                        onChange={(e) => setAgentConfig(prev => ({
                          ...prev,
                          promptTuning: { 
                            ...prev.promptTuning, 
                            optimizationModel: e.target.value 
                          }
                        }))}
                        className="mt-2"
                      >
                        <MenuItem value="gpt-4">GPT-4</MenuItem>
                        <MenuItem value="gpt-3.5-turbo">GPT-3.5 Turbo</MenuItem>
                        <MenuItem value="claude-3">Claude-3</MenuItem>
                        <MenuItem value="gemini-pro">Gemini Pro</MenuItem>
                        <MenuItem value="qwen-plus">Qwen Plus</MenuItem>
                      </Select>
                    </FormControl>

                    <FormControl fullWidth>
                      <Typography variant="subtitle2" className="mb-3 text-gray-700 font-medium">
                        算法评估模型
                      </Typography>
                      <Select
                        value={agentConfig.promptTuning.evaluationModel || 'gpt-4'}
                        onChange={(e) => setAgentConfig(prev => ({
                          ...prev,
                          promptTuning: { 
                            ...prev.promptTuning, 
                            evaluationModel: e.target.value 
                          }
                        }))}
                        className="mt-2"
                      >
                        <MenuItem value="gpt-4">GPT-4</MenuItem>
                        <MenuItem value="gpt-3.5-turbo">GPT-3.5 Turbo</MenuItem>
                        <MenuItem value="claude-3">Claude-3</MenuItem>
                        <MenuItem value="gemini-pro">Gemini Pro</MenuItem>
                        <MenuItem value="qwen-plus">Qwen Plus</MenuItem>
                      </Select>
                    </FormControl>

                    <FormControl fullWidth>
                      <Typography variant="subtitle2" className="mb-3 text-gray-700 font-medium">
                        优化轮数
                      </Typography>
                      <TextField
                        fullWidth
                        type="number"
                        value={agentConfig.promptTuning.optimizationRounds || 3}
                        onChange={(e) => setAgentConfig(prev => ({
                          ...prev,
                          promptTuning: { 
                            ...prev.promptTuning, 
                            optimizationRounds: parseInt(e.target.value) 
                          }
                        }))}
                        inputProps={{ min: 1, max: 10, step: 1 }}
                        helperText="建议设置 3-5 轮"
                        className="mt-2"
                      />
                    </FormControl>


                  </div>

                  <div className="mt-6">
                    <Button
                      variant="contained"
                      startIcon={<Sparkles />}
                      onClick={() => {
                        // Simulate optimization process
                        setSnackbar({ open: true, message: '开始优化提示词...', severity: 'info' })
                        // Here you would implement the actual optimization logic
                      }}
                      className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
                    >
                      开始优化
                    </Button>
                  </div>

                  {/* Optimization Tips */}
                  <Alert 
                    severity="info" 
                    icon={<Sparkles className="w-6 h-6" />}
                    className="border border-purple-200 bg-purple-50 mt-6"
                  >
                                      <Typography variant="body1" className="text-purple-800">
                    <strong>自动调优提示词：</strong>
                    系统将根据您配置的优化模型、评估模型和优化轮数，自动优化系统提示词。
                    优化过程将结合上传的用例集或手动输入的示例对话，生成更精准的提示词配置。
                  </Typography>
                  </Alert>
                </Paper>
              </div>
            </div>
          </TabPanel>

          {/* Orchestration Configuration Tab */}
          <TabPanel value={activeTab} index={1}>
            <div className="space-y-8">
              {/* Model Selection */}
              <Accordion defaultExpanded className="shadow-sm border border-gray-200 rounded-xl">
                <AccordionSummary expandIcon={<Settings />} className="px-6">
                  <Typography variant="h6" className="flex items-center text-gray-800 font-semibold">
                    <Zap className="mr-3 w-5 h-5 text-yellow-600" />
                    模型选择与配置
                  </Typography>
                </AccordionSummary>
                <AccordionDetails className="px-6 pb-6">
                  <div className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormControl fullWidth>
                        <Typography variant="subtitle1" className="mb-3 text-gray-700 font-medium">
                          LLM模型
                        </Typography>
                        <Select
                          value={agentConfig.model}
                          onChange={(e) => setAgentConfig(prev => ({ ...prev, model: e.target.value }))}
                          className="mt-2"
                        >
                          <MenuItem value="gpt-4">GPT-4</MenuItem>
                          <MenuItem value="gpt-3.5-turbo">GPT-3.5 Turbo</MenuItem>
                          <MenuItem value="claude-3">Claude-3</MenuItem>
                          <MenuItem value="gemini-pro">Gemini Pro</MenuItem>
                          <MenuItem value="qwen-plus">Qwen Plus</MenuItem>
                        </Select>
                      </FormControl>

                      <div>
                        <Typography variant="subtitle1" className="mb-3 text-gray-700 font-medium">
                          温度 (Temperature)
                        </Typography>
                        <TextField
                          fullWidth
                          type="number"
                          value={agentConfig.modelParams.temperature}
                          onChange={(e) => setAgentConfig(prev => ({
                            ...prev,
                            modelParams: { ...prev.modelParams, temperature: parseFloat(e.target.value) }
                          }))}
                          inputProps={{ min: 0, max: 2, step: 0.1 }}
                          helperText="控制输出的随机性"
                          className="mt-2"
                        />
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <Typography variant="subtitle1" className="mb-3 text-gray-700 font-medium">
                          最大Token数
                        </Typography>
                        <TextField
                          fullWidth
                          type="number"
                          value={agentConfig.modelParams.maxTokens}
                          onChange={(e) => setAgentConfig(prev => ({
                            ...prev,
                            modelParams: { ...prev.modelParams, maxTokens: parseInt(e.target.value) }
                          }))}
                          inputProps={{ min: 1, max: 8000 }}
                          helperText="限制单次对话的最大输出长度"
                          className="mt-2"
                        />
                      </div>

                      <div>
                        <Typography variant="subtitle1" className="mb-3 text-gray-700 font-medium">
                          Top P
                        </Typography>
                        <TextField
                          fullWidth
                          type="number"
                          value={agentConfig.modelParams.topP}
                          onChange={(e) => setAgentConfig(prev => ({
                            ...prev,
                            modelParams: { ...prev.modelParams, topP: parseFloat(e.target.value) }
                          }))}
                          inputProps={{ min: 0, max: 1, step: 0.1 }}
                          helperText="控制词汇选择的多样性"
                          className="mt-2"
                        />
                      </div>
                    </div>
                  </div>
                </AccordionDetails>
              </Accordion>

              {/* Plugin and Workflow Selection */}
              <Accordion className="shadow-sm border border-gray-200 rounded-xl">
                <AccordionSummary expandIcon={<Settings />} className="px-6">
                  <Typography variant="h6" className="flex items-center text-gray-800 font-semibold">
                    <Plug className="mr-3 w-5 h-5 text-green-600" />
                    插件与工作流
                  </Typography>
                </AccordionSummary>
                <AccordionDetails className="px-6 pb-6">
                  <div className="space-y-6">
                    <div>
                      <Typography variant="subtitle1" className="mb-4 text-gray-700 font-medium">
                        选择插件
                      </Typography>
                      <div className="flex flex-wrap gap-3">
                        {['web_search', 'calculator', 'file_reader', 'image_generator', 'code_interpreter'].map((plugin) => (
                          <Chip
                            key={plugin}
                            label={plugin}
                            onClick={() => {
                              const isSelected = agentConfig.plugins.includes(plugin)
                              setAgentConfig(prev => ({
                                ...prev,
                                plugins: isSelected 
                                  ? prev.plugins.filter(p => p !== plugin)
                                  : [...prev.plugins, plugin]
                              }))
                            }}
                            color={agentConfig.plugins.includes(plugin) ? 'primary' : 'default'}
                            variant={agentConfig.plugins.includes(plugin) ? 'filled' : 'outlined'}
                            className="text-sm px-3 py-2"
                          />
                        ))}
                      </div>
                    </div>

                    <div>
                      <Typography variant="subtitle1" className="mb-4 text-gray-700 font-medium">
                        选择工作流
                      </Typography>
                      <div className="flex flex-wrap gap-3">
                        {['customer_service', 'troubleshooting', 'data_analysis', 'content_generation'].map((workflow) => (
                          <Chip
                            key={workflow}
                            label={workflow}
                            onClick={() => {
                              const isSelected = agentConfig.workflows.includes(workflow)
                              setAgentConfig(prev => ({
                                ...prev,
                                workflows: isSelected 
                                  ? prev.workflows.filter(w => w !== workflow)
                                  : [...prev.workflows, workflow]
                              }))
                            }}
                            color={agentConfig.workflows.includes(workflow) ? 'primary' : 'default'}
                            variant={agentConfig.workflows.includes(workflow) ? 'filled' : 'outlined'}
                            className="text-sm px-3 py-2"
                          />
                        ))}
                      </div>
                    </div>
                  </div>
                </AccordionDetails>
              </Accordion>

              {/* Knowledge and Memory */}
              <Accordion className="shadow-sm border border-gray-200 rounded-xl">
                <AccordionSummary expandIcon={<Settings />} className="px-6">
                  <Typography variant="h6" className="flex items-center text-gray-800 font-semibold">
                    <BookOpen className="mr-3 w-5 h-5 text-purple-600" />
                    知识与记忆
                  </Typography>
                </AccordionSummary>
                <AccordionDetails className="px-6 pb-6">
                  <div className="space-y-6">
                    <div>
                      <Typography variant="subtitle1" className="mb-4 text-gray-700 font-medium">
                        知识库
                      </Typography>
                      <div className="flex flex-wrap gap-3">
                        {['product_manual', 'faq_database', 'company_policies', 'user_guides'].map((knowledge) => (
                          <Chip
                            key={knowledge}
                            label={knowledge}
                            onClick={() => {
                              const isSelected = agentConfig.knowledge.includes(knowledge)
                              setAgentConfig(prev => ({
                                ...prev,
                                knowledge: isSelected 
                                  ? prev.knowledge.filter(k => k !== knowledge)
                                  : [...prev.knowledge, knowledge]
                              }))
                            }}
                            color={agentConfig.knowledge.includes(knowledge) ? 'primary' : 'default'}
                            variant={agentConfig.knowledge.includes(knowledge) ? 'filled' : 'outlined'}
                            className="text-sm px-3 py-2"
                          />
                        ))}
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormControlLabel
                        control={
                          <Switch
                            checked={agentConfig.memory.enabled}
                            onChange={(e) => setAgentConfig(prev => ({
                              ...prev,
                              memory: { ...prev.memory, enabled: e.target.checked }
                            }))}
                            color="primary"
                          />
                        }
                        label={
                          <Typography variant="subtitle1" className="text-gray-700 font-medium">
                            启用记忆功能
                          </Typography>
                        }
                      />

                      <FormControl fullWidth>
                        <Typography variant="subtitle1" className="mb-3 text-gray-700 font-medium">
                          记忆类型
                        </Typography>
                        <Select
                          value={agentConfig.memory.type}
                          onChange={(e) => setAgentConfig(prev => ({
                            ...prev,
                            memory: { ...prev.memory, type: e.target.value as any }
                          }))}
                          disabled={!agentConfig.memory.enabled}
                          className="mt-2"
                        >
                          <MenuItem value="conversation">对话记忆</MenuItem>
                          <MenuItem value="semantic">语义记忆</MenuItem>
                          <MenuItem value="hybrid">混合记忆</MenuItem>
                        </Select>
                      </FormControl>
                    </div>
                  </div>
                </AccordionDetails>
              </Accordion>

              {/* Opening Remarks */}
              <Paper elevation={0} className="p-6 border border-gray-200 rounded-xl">
                <Typography variant="h6" className="mb-4 flex items-center text-gray-800 font-semibold">
                  <MessageSquare className="mr-3 w-5 h-5 text-indigo-600" />
                  开场白设置
                </Typography>
                <TextField
                  fullWidth
                  multiline
                  rows={3}
                  value={agentConfig.openingRemarks}
                  onChange={(e) => setAgentConfig(prev => ({ ...prev, openingRemarks: e.target.value }))}
                  placeholder="设置智能体的开场白，让用户了解如何开始对话..."
                  helperText="这是用户开始对话时智能体的第一句话"
                  className="mt-2"
                />
              </Paper>
            </div>
          </TabPanel>

          {/* Preview and Debug Tab */}
          <TabPanel value={activeTab} index={2}>
            <div className="space-y-8">
              {/* Test Input */}
              <Paper elevation={0} className="p-6 border border-gray-200 rounded-xl">
                <Typography variant="h6" className="mb-4 text-gray-800 font-semibold">
                  测试输入
                </Typography>
                <div className="flex items-center space-x-4">
                  <TextField
                    fullWidth
                    value={testMessage}
                    onChange={(e) => setTestMessage(e.target.value)}
                    placeholder="输入测试消息来调试智能体..."
                    onKeyPress={(e) => e.key === 'Enter' && handleTest()}
                    className="mt-2"
                  />
                  <Button
                    variant="contained"
                    startIcon={<Play />}
                    onClick={handleTest}
                    disabled={isTesting || !testMessage.trim()}
                    className="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 shadow-lg px-6"
                  >
                    {isTesting ? '测试中...' : '发送测试'}
                  </Button>
                </div>
              </Paper>

              {/* Test History */}
              <Paper elevation={0} className="p-6 border border-gray-200 rounded-xl">
                <Typography variant="h6" className="mb-4 text-gray-800 font-semibold">
                  对话历史
                </Typography>
                <div className="space-y-4 max-h-96 overflow-y-auto bg-gray-50 p-4 rounded-lg">
                  {agentConfig.testHistory.length === 0 ? (
                    <div className="text-center py-12">
                      <TestTube className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                      <p className="text-gray-500 text-lg">暂无对话记录，开始测试以查看效果</p>
                    </div>
                  ) : (
                    agentConfig.testHistory.map((msg, index) => (
                      <div
                        key={index}
                        className={`p-4 rounded-lg ${
                          msg.role === 'user' 
                            ? 'bg-blue-100 ml-8 border-l-4 border-blue-500' 
                            : 'bg-green-100 mr-8 border-l-4 border-green-500'
                        }`}
                      >
                        <div className="flex items-center justify-between mb-2">
                          <div className="font-semibold text-sm">
                            {msg.role === 'user' ? '👤 用户' : '🤖 AI助手'}
                          </div>
                          <div className="text-xs text-gray-500">
                            {msg.timestamp.toLocaleTimeString()}
                          </div>
                        </div>
                        <div className="text-gray-800">{msg.content}</div>
                      </div>
                    ))
                  )}
                </div>
              </Paper>

              {/* Debug Information */}
              <Paper elevation={0} className="p-6 border border-gray-200 rounded-xl bg-gradient-to-r from-blue-50 to-indigo-50">
                <Typography variant="h6" className="mb-4 text-gray-800 font-semibold">
                  调试信息
                </Typography>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm">
                  <div className="bg-white p-4 rounded-lg border border-blue-200">
                    <strong className="text-blue-800">当前模型：</strong> {agentConfig.model}
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-blue-200">
                    <strong className="text-blue-800">温度设置：</strong> {agentConfig.modelParams.temperature}
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-blue-200">
                    <strong className="text-blue-800">启用插件：</strong> {agentConfig.plugins.join(', ') || '无'}
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-blue-200">
                    <strong className="text-blue-800">记忆状态：</strong> {agentConfig.memory.enabled ? '启用' : '禁用'}
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-blue-200">
                    <strong className="text-blue-800">编辑模式：</strong> {agentConfig.editMode === 'ai' ? 'AI辅助' : '手动编辑'}
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-blue-200">
                    <strong className="text-blue-800">对话轮数：</strong> {agentConfig.testHistory.length / 2}
                  </div>
                </div>
              </Paper>

              {/* Action Buttons */}
              <div className="flex items-center justify-between pt-6">
                <div className="flex space-x-3">
                  <Button
                    variant="outlined"
                    startIcon={<Upload />}
                    component="label"
                    className="border-gray-300 text-gray-600 hover:border-gray-400"
                  >
                    导入配置
                    <input
                      type="file"
                      hidden
                      accept=".json"
                      onChange={handleImport}
                    />
                  </Button>
                  
                  <Button
                    variant="outlined"
                    startIcon={<Download />}
                    onClick={handleExport}
                    className="border-gray-300 text-gray-600 hover:border-gray-400"
                  >
                    导出配置
                  </Button>
                </div>

                <Button
                  variant="outlined"
                  color="error"
                  startIcon={<Trash2 />}
                  onClick={() => {
                    if (confirm('确定要删除这个智能体吗？')) {
                      navigate('/dashboard/agents')
                    }
                  }}
                  className="border-red-300 text-red-600 hover:border-red-400 hover:bg-red-50"
                >
                  删除智能体
                </Button>
              </div>
            </div>
          </TabPanel>
        </Card>
      </div>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert 
          onClose={() => setSnackbar({ ...snackbar, open: false })} 
          severity={snackbar.severity}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </div>
  )
}

export default AgentEditorEnhancedPage